webpackJsonp([0],[function(t,o){angular.module("todomvc").controller("TodoCtrl",["$scope","$stateParams","$filter","store",function(t,o,e,i){"use strict";var n=t.todoList=i.todoList;t.newTodo="",t.editedTodo=null,t.$watch("todoList.todos",function(){t.remainingCount=e("filter")(n.todos,{completed:!1}).length,t.completedCount=n.todos.length-t.remainingCount,t.allChecked=!t.remainingCount},!0),t.$on("$stateChangeSuccess",function(){var e=t.status=o.status||"";t.statusFilter="active"===e?{completed:!1}:"completed"===e?{completed:!0}:{}}),t.addTodo=function(){var e={todoListId:o.id,title:t.newTodo.trim(),completed:!1};e.title&&(t.saving=!0,i.insert(e).then(function(){t.newTodo=""}).finally(function(){t.saving=!1}))},t.editTodo=function(o){t.editedTodo=o,t.originalTodo=angular.extend({},o)},t.saveEdits=function(o,e){return"blur"===e&&"submit"===t.saveEvent?void(t.saveEvent=null):(t.saveEvent=e,t.reverted?void(t.reverted=null):(o.title=o.title.trim(),o.title===t.originalTodo.title?void(t.editedTodo=null):void i[o.title?"put":"delete"](o).then(function(){},function(){o.title=t.originalTodo.title}).finally(function(){t.editedTodo=null})))},t.revertEdits=function(o){n.todos[n.todos.indexOf(o)]=t.originalTodo,t.editedTodo=null,t.originalTodo=null,t.reverted=!0},t.removeTodo=function(t){i.delete(t)},t.saveTodo=function(t){i.put(t)},t.toggleCompleted=function(t,o){angular.isDefined(o)&&(t.completed=o),i.put(t,n.todos.indexOf(t)).then(function(){},function(){t.completed=!t.completed})},t.clearCompletedTodos=function(){i.clearCompleted()},t.markAll=function(o){n.todos.forEach(function(e){e.completed!==o&&t.toggleCompleted(e,o)})}}])},function(t,o){angular.module("todomvc").controller("TodoListsCtrl",["$scope","$stateParams","$state","$filter","store",function(t,o,e,i,n){"use strict";var s=t.todoLists=n.todoLists;t.newTodoList="",t.editedTodoList=null,t.addTodoList=function(){var o={title:t.newTodoList.trim()};o.title&&(t.saving=!0,n.insert(o).then(function(){t.newTodoList=""}).finally(function(){t.saving=!1}))},t.editTodoList=function(o){t.editedTodoList=o,t.originalTodoList=angular.extend({},o)},t.saveEdits=function(o,e){return"blur"===e&&"submit"===t.saveEvent?void(t.saveEvent=null):(t.saveEvent=e,t.reverted?void(t.reverted=null):(o.title=o.title.trim(),o.title===t.originalTodoList.title?void(t.editedTodoList=null):void n[o.title?"put":"delete"](o).then(function(){},function(){o.title=t.originalTodoList.title}).finally(function(){t.editedTodoList=null})))},t.revertEdits=function(o){s[s.indexOf(o)]=t.originalTodoList,t.editedTodoList=null,t.originalTodoList=null,t.reverted=!0},t.removeTodoList=function(t){n.delete(t),e.go("^")},t.saveTodoList=function(t){n.put(s)},t.clearCompletedTodos=function(){n.clearCompleted()}}])},function(t,o){angular.module("todomvc").controller("WorkCtrl",["$scope","$stateParams","$state","$filter","store",function(t,o,e,i,n){"use strict";t.workLists=n.workLists;t.newWork="",t.editedWork=null,t.$watch("workList.works",function(){t.remainingCount=i("filter")(workList.works,{completed:!1}).length,t.completedCount=workList.works.length-t.remainingCount,t.allChecked=!t.remainingCount},!0),t.$on("$stateChangeSuccess",function(){var e=t.status=o.status||"";t.statusFilter="active"===e?{completed:!1}:"completed"===e?{completed:!0}:{}}),t.addWork=function(){var e={workListId:o.id,title:t.newWork.trim(),completed:!1};e.title&&(t.saving=!0,n.insert(e).then(function(){t.newWork=""}).finally(function(){t.saving=!1}))},t.editWork=function(o){t.editedWork=o,t.originalWork=angular.extend({},o)},t.saveEdits=function(o,e){return"blur"===e&&"submit"===t.saveEvent?void(t.saveEvent=null):(t.saveEvent=e,t.reverted?void(t.reverted=null):(o.title=o.title.trim(),o.title===t.originalWork.title?void(t.editedWork=null):void n[o.title?"put":"delete"](o).then(function(){},function(){o.title=t.originalWork.title}).finally(function(){t.editedWork=null})))},t.revertEdits=function(o){workList.works[workList.works.indexOf(o)]=t.originalWork,t.editedWork=null,t.originalWork=null,t.reverted=!0},t.removeWork=function(t){n.delete(t)},t.saveWork=function(t){n.put(t)},t.toggleCompleted=function(t,o){angular.isDefined(o)&&(t.completed=o),n.put(t,workList.works.indexOf(tworkodo)).then(function(){},function(){t.completed=!t.completed})},t.clearCompletedWorks=function(){n.clearCompleted()},t.markAll=function(o){workList.works.forEach(function(e){e.completed!==o&&t.toggleCompleted(e,o)})}}])},function(t,o){angular.module("todomvc").controller("WorkListsCtrl",["$scope","$stateParams","$state","$filter","store",function(t,o,e,i,n){"use strict";var s=t.workLists=n.workLists;t.newWorkList=[],t.editedWorkList=null,t.addWorkList=function(){var o={title:t.newWorkList.trim()};o.title&&(t.saving=!0,n.insert(o).then(function(){t.newWorkList=""}).finally(function(){t.saving=!1}))},t.editedWorkList=function(o){t.editedWorkList=o,t.originalWorkList=angular.extend({},o)},t.savedEdits=function(o,e){return"blur"===e&&"submit"===t.saveEvent?void(t.saveEvent=null):(t.saveEvent=e,t.reverted&&(t.reverted=null),o.title=o.title.trim,o.title===t.originalWorkList.title?void(t.editedWorkList=null):void n[o.title?"put":"delete"](o).then(function(){},function(){o.title=t.editedWorkList.title}).finally(function(){t.editedWorkList=null}))},t.revertEdits=function(o){s[s.indexOf(o)]=t.originalWorkList,t.editedWorkList=null,t.originalWorkList=null,t.reverted=!0},t.removeWorkList=function(t){n.delete(t),e.go("^")},t.saveWorkList=function(t){n.put(s)},t.clearCompletedWorks=function(){n.clearCompleted()}}])},function(t,o){angular.module("todomvc").directive("todoEscape",[function(){"use strict";return function(t,o,e){o.bind("keydown",function(o){27===o.keyCode&&t.$apply(e.todoEscape)}),t.$on("$destroy",function(){o.unbind("keydown")})}}])},function(t,o){angular.module("todomvc").directive("todoFocus",["$timeout",function(t){"use strict";return function(o,e,i){o.$watch(i.todoFocus,function(o){o&&t(function(){e[0].focus()},0,!1)})}}])},function(t,o){angular.module("todomvc").factory("todoListsStorage",["$resource",function(t){"use strict";var o={todoLists:[],api:t("/api/todo-lists/:id",null,{get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"},delete:{method:"DELETE"}}),clearCompleted:function(){var t=o.todoLists.slice(0),e=o.todoLists.filter(function(t){return!t.completed});return angular.copy(e,o.todoLists),o.api.delete(function(){},function(){angular.copy(t,o.todos)})},delete:function(t){var e=o.todoLists.slice(0);return o.todoLists.splice(o.todoLists.indexOf(t),1),o.api.delete({id:t.id},function(){},function(){angular.copy(e,o.todoLists)})},get:function(){return o.api.query(function(t){angular.copy(t,o.todoLists)})},insert:function(t){var e=o.todoLists.slice(0);return o.api.save(t,function(e){t.id=e.id,o.todoLists.push(t)},function(){angular.copy(e,o.todoLists)}).$promise},put:function(t){return o.api.update({id:t.id},t).$promise}};return o}])},function(t,o){angular.module("todomvc").factory("todoStorage",["$resource",function(t){"use strict";var o={todoList:{},api:t("/api/todos/:id",null,{save:{method:"POST"},update:{method:"PUT"},delete:{method:"DELETE"}}),listApi:t("/api/todo-lists/:id",null,{get:{method:"GET"}}),listClearCompletedApi:t("/api/todo-lists/:id/clear-completed",null,{delete:{method:"DELETE"}}),clearCompleted:function(){var t=o.todoList.todos.slice(0),e=o.todoList.todos.filter(function(t){return!t.completed});return angular.copy(e,o.todoList.todos),o.listClearCompletedApi.delete({id:o.todoList.id},function(){},function(){angular.copy(t,o.todoList.todos)})},delete:function(t){var e=o.todoList.todos.slice(0);return o.todoList.todos.splice(o.todoList.todos.indexOf(t),1),o.api.delete({id:t.id},function(){},function(){angular.copy(e,o.todoList.todos)})},get:function(t){return o.listApi.get({id:t},function(t){angular.copy(t,o.todoList)},function(t){}).$promise},insert:function(t){var e=o.todoList.todos.slice(0);return o.api.save(t,function(e){t.id=e.id,o.todoList.todos.push(t)},function(){angular.copy(e,o.todoList.todos)}).$promise},put:function(t){return o.api.update({id:t.id},t).$promise}};return new Promise(function(t,e){t(o)})}])},function(t,o){angular.module("todomvc").factory("workListsStorage",["$resource",function(t){"use strict";var o={workLists:[],api:t("/api/work-lists/:id",null,{get:{method:"GET"},save:{method:"POST"},update:{method:"PUT"},delete:{method:"DELETE"}}),get:function(){return o.api.query(function(t){angular.copy(t,o.workLists)})},insert:function(t){var e=o.workLists.slice(0);return o.api.save(t,function(e){t.id=e.id,o.workLists.push(t)},function(){angular.copy(e,o.workLists)}).$promise},delete:function(t){var e=o.workLists.slice(0);return o.workLists.splice(o.workLists.indexOf(t),1),o.api.delete({id:t.id},function(){},function(){angular.copy(e,o.workLists)})},put:function(t){return o.api.update({id:t.id},t).$promise}};return o}])},function(t,o){angular.module("todomvc").factory("workStorage",["$resource",function(t){"use strict";var o={workList:{},api:t("/api/works/:id",null,{save:{method:"POST"},update:{method:"PUT"},delete:{method:"DELETE"}}),listApi:t("/api/work-lists/:id",null,{get:{method:"GET"}}),listClearCompletedApi:t("/api/work-lists/:id/clear-completed",null,{delete:{method:"DELETE"}}),clearCompleted:function(){var t=o.workList.works.slice(0),e=o.workList.works.filter(function(t){return!t.completed});return angular.copy(e,o.workList.works),o.listClearCompletedApi.delete({id:o.workList.id},function(){},function(){angular.copy(t,o.workList.works)})},delete:function(t){var e=o.workList.works.slice(0);return o.workList.works.splice(o.workList.works.indexOf(t),1),o.api.delete({id:t.id},function(){},function(){angular.copy(e,o.workList.works)})},get:function(t){return o.listApi.get({id:t},function(t){angular.copy(t,o.workList)},function(t){}).$promise},insert:function(t){var e=o.workList.works.slice(0);return o.api.save(t,function(e){t.id=e.id,o.workList.works.push(t)},function(){angular.copy(e,o.workList.works)}).$promise},put:function(t){return o.api.update({id:t.id},t).$promise}};return new Promise(function(t,e){t(o)})}])},,,,function(t,o){},function(t,o){t.exports='\r\n<ol>\r\n    <li>\r\n        <!--<p><a href="#!/todo-lists">Todo Lists</a></p>-->\r\n        <p><a ui-sref="todoLists">Todo Lists</a></p>\r\n        \r\n    </li>\r\n    <li>\r\n        <!--<p><a href="#!/work-lists">Work Lists</a></p>-->\r\n        <p><a ui-sref="workLists">Work Lists</a></p>\r\n    </li>\r\n</ol>'},function(t,o){t.exports='<section class="todoapp todo-lists">\r\n    <header class="header">\r\n        <h1>todo lists</h1>\r\n        <form class="todo-form" ng-submit="addTodoList()">\r\n            <input class="new-todo" placeholder="How todo list should be named?" ng-model="newTodoList" ng-disabled="saving" autofocus>\r\n        </form>\r\n    </header>\r\n    <section class="main" ng-show="todoLists.length" ng-cloak>\r\n        <ul class="todo-list">\r\n            <li ui-sref-active="active" ng-repeat="todoList in todoLists | filter:statusFilter track by $index" ng-class="{ editing: todoList == editedTodoList}">\r\n                <!--<a ui-sref="todoLists.todos({id:todoList.id})">\r\n                    <label ng-dblclick="editTodoList(todoList)">{{todoList.title}}</label>\r\n                </a>-->\r\n                <div class="view" ui-sref="todoLists.todos({id:todoList.id})">\r\n                    <label ng-dblclick="editTodoList(todoList)">{{todoList.title}}</label>\r\n                    <button class="destroy" ng-click="removeTodoList(todoList)"></button>\r\n                </div>\r\n                <form ng-submit="saveEdits(todoList, \'submit\')">\r\n                    <input class="edit" ng-trim="false" ng-model="todoList.title" todo-escape="revertEdits(todoList)" ng-blur="saveEdits(todoList, \'blur\')"\r\n                           todo-focus="todoList == editedTodoList">\r\n                </form>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n</section>\r\n\r\n<div ui-view="" class="todos"></div>'},function(t,o){t.exports='\r\n    <section class="todoapp">\r\n        <header class="header">\r\n            <h1>todos</h1>\r\n            <form class="todo-form" ng-submit="addTodo()">\r\n                <input class="new-todo" placeholder="What needs to be done?" ng-model="newTodo" ng-disabled="saving" autofocus>\r\n            </form>\r\n        </header>\r\n        <section class="main" ng-show="todoList.todos.length" ng-cloak>\r\n            <input class="toggle-all" type="checkbox" ng-model="allChecked" ng-click="markAll(allChecked)">\r\n            <label for="toggle-all">Mark all as complete</label>\r\n            <ul class="todo-list">\r\n                <li ng-repeat="todo in todoList.todos | filter:statusFilter track by $index" ng-class="{completed: todo.completed, editing: todo == editedTodo}">\r\n                    <div class="view">\r\n                        <input class="toggle" type="checkbox" ng-model="todo.completed" ng-change="toggleCompleted(todo)">\r\n                        <label ng-dblclick="editTodo(todo)">{{todo.title}}</label>\r\n                        <button class="destroy" ng-click="removeTodo(todo)"></button>\r\n                    </div>\r\n                    <form ng-submit="saveEdits(todo, \'submit\')">\r\n                        <input class="edit" ng-trim="false" ng-model="todo.title" todo-escape="revertEdits(todo)" ng-blur="saveEdits(todo, \'blur\')"\r\n                               todo-focus="todo == editedTodo">\r\n                    </form>\r\n                </li>\r\n            </ul>\r\n        </section>\r\n        <footer class="footer" ng-show="todoList.todos.length" ng-cloak>\r\n            <span class="todo-count">\r\n                <strong>{{remainingCount}}</strong>\r\n                <ng-pluralize count="remainingCount" when="{ one: \'item left\', other: \'items left\' }"></ng-pluralize>\r\n            </span>\r\n            <ul class="filters">\r\n                <li>\r\n                    <a ng-class="{selected: status == \'\'} " ui-sref="todoLists.todos({id:todoList.id, status: null})" >All</a>\r\n                </li>\r\n                <li>\r\n                    <a ng-class="{selected: status == \'active\'}" ui-sref="todoLists.todos({id:todoList.id, status: \'active\'})" >Active</a>\r\n                </li>\r\n                <li>\r\n                    <a ng-class="{selected: status == \'completed\'}" ui-sref="todoLists.todos({id:todoList.id, status: \'completed\'})">Completed</a>\r\n                </li>\r\n            </ul>\r\n            <button class="clear-completed" ng-click="clearCompletedTodos()" ng-show="completedCount">Clear completed</button>\r\n        </footer>\r\n    </section>'},function(t,o){t.exports='<section class="todoapp todo-lists">\r\n\r\n    <header class="header">\r\n        <h1>work lists</h1>\r\n        <form class="todo-form" ng-submit="addWorkList()">\r\n            <input class="new-todo" placeholder="How work list should be named?" ng-model="newWorkList" ng-disabled="saving" autofocus>\r\n        </form>\r\n    </header>\r\n\r\n    <section class="main" ng-show="workLists.length" ng-cloak>\r\n        <ul class="todo-list">\r\n            <li ui-sref-active="active" ng-repeat="workList in workLists | filter:statusFilter track by $index" ng-class="{ editing: workList == editedWorkList}"> \r\n\r\n\r\n                <div class="view" ui-sref="workLists.works({id:workList.id})">\r\n                    <label ng-dblclick="editWorkList(workList)">{{workList.title}}</label>\r\n                    <button class="destroy" ng-click="removeWorkList(workList)"></button>\r\n                </div>\r\n\r\n                <form ng-submit="saveEdits(workList, \'submit\')">\r\n                    <input class="edit" ng-trim="false" ng-model="workList.title" work-escape="revertEdits(workList)" ng-blur="saveEdits(workList, \'blur\')"\r\n                           work-focus="workList == editedWorkList">\r\n                </form>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n\r\n</section>'},function(t,o){t.exports='\r\n<section class="todoapp">\r\n    <header class="header">\r\n        <h1>works</h1>\r\n        <form class="todo-form" ng-submit="addWork()">\r\n            <input class="new-todo" placeholder="What needs to be done?" ng-model="newWork" ng-disabled="saving" autofocus>\r\n        </form>\r\n    </header>\r\n    <section class="main" ng-show="workList.works.length" ng-cloak>\r\n        <input class="toggle-all" type="checkbox" ng-model="allChecked" ng-click="markAll(allChecked)">\r\n        <label for="toggle-all">Mark all as complete</label>\r\n        <ul class="todo-list">\r\n            <li ng-repeat="work in workList.works | filter:statusFilter track by $index" ng-class="{completed: work.completed, editing: work == editedWork}">\r\n                <div class="view">\r\n                    <input class="toggle" type="checkbox" ng-model="work.completed" ng-change="toggleCompleted(work)">\r\n                    <label ng-dblclick="editWork(work)">{{work.title}}</label>\r\n                    <button class="destroy" ng-click="removeWork(work)"></button>\r\n                </div>\r\n                <form ng-submit="saveEdits(work, \'submit\')">\r\n                    <input class="edit" ng-trim="false" ng-model="work.title" work-escape="revertEdits(work)" ng-blur="saveEdits(work, \'blur\')"\r\n                           work-focus="work == editedWork">\r\n                </form>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n    <footer class="footer" ng-show="todoList.todos.length" ng-cloak>\r\n        <span class="todo-count">\r\n            <strong>{{remainingCount}}</strong>\r\n            <ng-pluralize count="remainingCount" when="{ one: \'item left\', other: \'items left\' }"></ng-pluralize>\r\n        </span>\r\n        <ul class="filters">\r\n            <li>\r\n                <a ng-class="{selected: status == \'\'} " ui-sref="todoLists.todos({id:todoList.id, status: null})">All</a>\r\n            </li>\r\n            <li>\r\n                <a ng-class="{selected: status == \'active\'}" ui-sref="todoLists.todos({id:todoList.id, status: \'active\'})">Active</a>\r\n            </li>\r\n            <li>\r\n                <a ng-class="{selected: status == \'completed\'}" ui-sref="todoLists.todos({id:todoList.id, status: \'completed\'})">Completed</a>\r\n            </li>\r\n        </ul>\r\n        <button class="clear-completed" ng-click="clearCompletedTodos()" ng-show="completedCount">Clear completed</button>\r\n    </footer>\r\n</section>'},function(t,o,e){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var i=e(13);e.n(i);angular.module("todomvc",["ui.router","ngResource"]).config(["$stateProvider","$urlRouterProvider",function(t,o){o.otherwise("/"),t.state("hello",{url:"/",template:e(14)}).state("workLists",{url:"/work-lists",template:e(17),controller:"WorkListsCtrl",resolve:{store:["workListsStorage",function(t){return t.get(),t}]}}).state("workLists.works",{url:"work-lists/:id/:status",template:e(18),controller:"WorkCtrl",resolve:{store:["workStorage","$stateParams",function(t,o){return t.then(function(t){return t.get(o.id).then(function(o){return t})})}]}}).state("todoLists",{url:"/todo-lists",template:e(15),controller:"TodoListsCtrl",resolve:{store:["todoListsStorage",function(t){return t.get(),t}]}}).state("todoLists.todos",{url:"todo-lists/:id/:status",template:e(16),controller:"TodoCtrl",resolve:{store:["todoStorage","$stateParams",function(t,o){return t.then(function(t){return t.get(o.id).then(function(o){return t})})}]}})}]),e(4),e(5),e(6),e(7),e(8),e(9),e(1),e(0),e(3),e(2)}],[19]);
//# sourceMappingURL=app.bundle.js.map