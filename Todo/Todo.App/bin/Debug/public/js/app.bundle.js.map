{"version":3,"sources":["webpack:///app.bundle.js","webpack:///./controllers/todoCtrl.js","webpack:///./controllers/todoListsCtrl.js","webpack:///./directives/todoEscape.js","webpack:///./directives/todoFocus.js","webpack:///./services/todoListsStorage.js","webpack:///./services/todoStorage.js","webpack:///./work/controllers/titleMirrorCtrl.js","webpack:///./work/controllers/workCtrl.js","webpack:///./work/controllers/workListsCtrl.js","webpack:///./work/directives/titleMirror.js","webpack:///./work/index.js","webpack:///./work/services/mirrorComposer.js","webpack:///./work/services/workListsStorage.js","webpack:///./work/services/workStorage.js","webpack:///./templates/options.html","webpack:///./templates/todo-lists.html","webpack:///./templates/todos.html","webpack:///./app.js","webpack:///./work/templates/mirror.html","webpack:///./work/templates/work-lists.html","webpack:///./work/templates/works.html"],"names":["webpackJsonp","module","exports","angular","controller","$scope","$stateParams","$filter","store","todoList","newTodo","editedTodo","$watch","remainingCount","todos","completed","length","completedCount","allChecked","$on","status","statusFilter","addTodo","todoListId","id","title","trim","saving","insert","then","finally","editTodo","todo","originalTodo","extend","saveEdits","event","saveEvent","reverted","revertEdits","indexOf","removeTodo","delete","saveTodo","put","toggleCompleted","isDefined","clearCompletedTodos","clearCompleted","markAll","forEach","$state","todoLists","newTodoList","editedTodoList","addTodoList","editTodoList","originalTodoList","removeTodoList","go","saveTodoList","directive","scope","elem","attrs","bind","keyCode","$apply","todoEscape","unbind","$timeout","todoFocus","newVal","focus","factory","$resource","api","get","method","save","update","originalTodos","slice","incompleteTodos","filter","copy","originalTodoLists","splice","query","resp","push","$promise","listApi","listClearCompletedApi","error","Promise","resolve","reject","mirrorComposer","console","log","mirror","getStr","workList","newWork","editedWork","works","addWork","workListId","editWork","work","originalWork","removeWork","saveWork","response","catch","clearCompletedWorks","workLists","newWorkList","editedWorkList","addWorkList","originalWorkList","savedEdits","removeWorkList","saveWorkList","__webpack_require__","template","config","$stateProvider","$urlRouterProvider","otherwise","state","url","workListsStorage","workStorage","workModule","originalWorkLists","originalWorks","incompleteWorks","__webpack_exports__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__Content_css_index_css__","n","todoListsStorage","todoStorage","todoModule"],"mappings":"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","file":"app.bundle.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoCtrl', ['$scope', '$stateParams', '$filter','store', function ($scope, $stateParams, $filter, store) {\r\n        'use strict';\r\n\r\n        var todoList = $scope.todoList = store.todoList;\r\n\r\n        $scope.newTodo = '';\r\n        $scope.editedTodo = null;\r\n\r\n        $scope.$watch('todoList.todos', function () {\r\n            $scope.remainingCount = $filter('filter')(todoList.todos, { completed: false }).length;\r\n            $scope.completedCount = todoList.todos.length - $scope.remainingCount;\r\n            $scope.allChecked = !$scope.remainingCount;\r\n        }, true);\r\n\r\n        // Monitor the current route for changes and adjust the filter accordingly.\r\n        $scope.$on('$stateChangeSuccess', function () {\r\n            var status = $scope.status = $stateParams.status || '';\r\n\r\n            if (status === 'active') {\r\n                $scope.statusFilter = { completed: false };\r\n            }\r\n            else if (status === 'completed') {\r\n                $scope.statusFilter = { completed: true };\r\n            }\r\n            else {\r\n                $scope.statusFilter = {};\r\n            }\r\n        });\r\n\r\n        $scope.addTodo = function () {\r\n            var newTodo = {\r\n                todoListId: $stateParams.id,\r\n                title: $scope.newTodo.trim(),\r\n                completed: false\r\n            };\r\n\r\n            if (!newTodo.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodo)\r\n                .then(function success() {\r\n                    $scope.newTodo = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodo = function (todo) {\r\n            $scope.editedTodo = todo;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodo = angular.extend({}, todo);\r\n        };\r\n\r\n        $scope.saveEdits = function (todo, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todo.title = todo.title.trim();\r\n\r\n            if (todo.title === $scope.originalTodo.title) {\r\n                $scope.editedTodo = null;\r\n                return;\r\n            }\r\n\r\n            store[todo.title ? 'put' : 'delete'](todo)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.title = $scope.originalTodo.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodo = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todo) {\r\n            todoList.todos[todoList.todos.indexOf(todo)] = $scope.originalTodo;\r\n            $scope.editedTodo = null;\r\n            $scope.originalTodo = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodo = function (todo) {\r\n            store.delete(todo);\r\n        };\r\n\r\n        $scope.saveTodo = function (todo) {\r\n            store.put(todo);\r\n        };\r\n\r\n        $scope.toggleCompleted = function (todo, completed) {\r\n            if (angular.isDefined(completed)) {\r\n                todo.completed = completed;\r\n            }\r\n\r\n            store.put(todo, todoList.todos.indexOf(todo))\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.completed = !todo.completed;\r\n                });\r\n        };\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n        $scope.markAll = function (completed) {\r\n            todoList.todos.forEach(function (todo) {\r\n                if (todo.completed !== completed) {\r\n                    $scope.toggleCompleted(todo, completed);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoListsCtrl', [\r\n                '$scope', '$stateParams', '$state', '$filter', 'store',\r\n                function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n        'use strict';\r\n\r\n        var todoLists = $scope.todoLists = store.todoLists;\r\n\r\n        $scope.newTodoList = '';\r\n        $scope.editedTodoList = null;\r\n\r\n        $scope.addTodoList = function () {\r\n            var newTodoList = {\r\n                title: $scope.newTodoList.trim(),\r\n            };\r\n\r\n            if (!newTodoList.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodoList)\r\n                .then(function success() {\r\n                    $scope.newTodoList = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodoList = function (todoList) {\r\n            $scope.editedTodoList = todoList;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodoList = angular.extend({}, todoList);\r\n        };\r\n\r\n        $scope.saveEdits = function (todoList, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todoList.title = todoList.title.trim();\r\n\r\n            if (todoList.title === $scope.originalTodoList.title) {\r\n                $scope.editedTodoList = null;\r\n                return;\r\n            }\r\n\r\n            store[todoList.title ? 'put' : 'delete'](todoList)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todoList.title = $scope.originalTodoList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodoList = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todoList) {\r\n            todoLists[todoLists.indexOf(todoList)] = $scope.originalTodoList;\r\n            $scope.editedTodoList = null;\r\n            $scope.originalTodoList = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodoList = function (todoList) {\r\n            store.delete(todoList);\r\n            $state.go('^');\r\n        };\r\n\r\n        $scope.saveTodoList = function (todoList) {\r\n            store.put(todoLists);\r\n        };\r\n\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * Directive that executes an expression when the element it is applied to gets\r\n * an `escape` keydown event.\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoEscape', [function () {\r\n        'use strict';\r\n\r\n        var ESCAPE_KEY = 27;\r\n\r\n        return function (scope, elem, attrs) {\r\n            elem.bind('keydown', function (event) {\r\n                if (event.keyCode === ESCAPE_KEY) {\r\n                    scope.$apply(attrs.todoEscape);\r\n                }\r\n            });\r\n\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind('keydown');\r\n            });\r\n        };\r\n    }]);\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * Directive that places focus on the element it is applied to when the\r\n * expression it binds to evaluates to true\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoFocus', ['$timeout', function todoFocus($timeout) {\r\n        'use strict';\r\n\r\n        return function (scope, elem, attrs) {\r\n            scope.$watch(attrs.todoFocus, function (newVal) {\r\n                if (newVal) {\r\n                    $timeout(function () {\r\n                        elem[0].focus();\r\n                    }, 0, false);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.dfsdfsd\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n    .factory('todoListsStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n        var store = {\r\n            todoLists: [],\r\n\r\n            api: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),  \r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoLists.slice(0);\r\n\r\n                var incompleteTodos = store.todoLists.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoLists);\r\n\r\n                return store.api.delete(function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                store.todoLists.splice(store.todoLists.indexOf(todoList), 1);\r\n                return store.api.delete({ id: todoList.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    });\r\n            },\r\n\r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.todoLists);\r\n                });\r\n            },\r\n\r\n            insert: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                return store.api.save(todoList,\r\n                    function success(resp) {\r\n                        todoList.id = resp.id;\r\n                        store.todoLists.push(todoList);\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todoList) {\r\n                return store.api.update({ id: todoList.id }, todoList)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        return store;\r\n    }])\r\n\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n\r\n    .factory('todoStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            todoList: {},\r\n\r\n            api: $resource('/api/todos/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/todo-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                var incompleteTodos = store.todoList.todos.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoList.todos);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.todoList.id },function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todoList.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                store.todoList.todos.splice(store.todoList.todos.indexOf(todo), 1);\r\n                return store.api.delete({ id: todo.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n\r\n                    function (resp) {\r\n                        angular.copy(resp, store.todoList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                return store.api.save(todo,\r\n                    function success(resp) {\r\n                        todo.id = resp.id;\r\n                        store.todoList.todos.push(todo);\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todo) {\r\n                return store.api.update({ id: todo.id }, todo)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n﻿angular.module('work')\r\n    .controller('TitleMirrorCtrl', ['$scope', 'mirrorComposer', function ($scope, mirrorComposer) {\r\n\r\n        console.log('controller: ');\r\n        $scope.mirror = mirrorComposer.getStr();\r\n    }]);\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n﻿angular.module('work')\r\n    .controller('WorkCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workList = $scope.workList = store.workList;\r\n\r\n            $scope.newWork = '';\r\n            $scope.editedWork = null;\r\n\r\n            $scope.$watch('workList.works', function () {\r\n                $scope.remainingCount = $filter('filter')(workList.works, { completed: false }).length;\r\n                $scope.completedCount = workList.works.length - $scope.remainingCount;\r\n                $scope.allChecked = !$scope.remainingCount;\r\n            }, true);\r\n\r\n            // Monitor the current route for changes and adjust the filter accordingly.\r\n            $scope.$on('$stateChangeSuccess', function () {\r\n                var status = $scope.status = $stateParams.status || '';\r\n\r\n                if (status === 'active') {\r\n                    $scope.statusFilter = { completed: false };\r\n                }\r\n                else if (status === 'completed') {\r\n                    $scope.statusFilter = { completed: true };\r\n                }\r\n                else {\r\n                    $scope.statusFilter = {};\r\n                }\r\n            });\r\n\r\n            $scope.addWork = function () {\r\n                var newWork = {\r\n                    workListId: $stateParams.id,\r\n                    title: $scope.newWork.trim(),\r\n                    completed: false\r\n                };\r\n\r\n                if (!newWork.title) {\r\n                    return;\r\n                }\r\n                \r\n\r\n                $scope.saving = true;\r\n                store.insert(newWork)\r\n                    .then(function success() {\r\n                        $scope.newWork = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };\r\n\r\n            $scope.editWork = function (work) {\r\n\r\n                $scope.newWork = '';\r\n\r\n\r\n                $scope.editedWork = work;\r\n                // Clone the original work to restore it on demand.\r\n                $scope.originalWork = angular.extend({}, work);\r\n            };\r\n\r\n            $scope.saveEdits = function (work, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Work edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n                    return;\r\n                }\r\n\r\n                work.title = work.title.trim();\r\n\r\n                if (work.title === $scope.originalWork.title) {\r\n                    $scope.editedWork = null;\r\n                    return;\r\n                }\r\n\r\n                store[work.title ? 'put' : 'delete'](work)\r\n                    .then(function success() {\r\n                    }, function error() {\r\n                        work.title = $scope.originalWork.title;\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.editedWork = null;\r\n                    });\r\n            };\r\n\r\n            $scope.revertEdits = function (work) {\r\n                workList.works[workList.works.indexOf(work)] = $scope.originalWork;\r\n                $scope.editedWork = null;\r\n                $scope.originalWork = null;\r\n                $scope.reverted = true;\r\n            };\r\n\r\n            $scope.removeWork = function (work) {\r\n                store.delete(work);\r\n            };\r\n\r\n            $scope.saveWork = function (work) {\r\n                store.put(work);\r\n            };\r\n\r\n            $scope.toggleCompleted = function (work, completed) {\r\n                if (angular.isDefined(completed)) {\r\n                    work.completed = completed;\r\n                }\r\n\r\n                store.put(work)\r\n                    .then(function (response) {\r\n                    //console.log(response);\r\n                    }).catch(function (error) {\r\n                    work.completed = !work.completed;\r\n                    //console.log(error);\r\n                });\r\n            };\r\n\r\n            $scope.clearCompletedWorks = function () {\r\n                store.clearCompleted();\r\n            };\r\n\r\n            $scope.markAll = function (completed) {\r\n                workList.works.forEach(function (work) {\r\n                    if (work.completed !== completed) {\r\n                        $scope.toggleCompleted(work, completed);\r\n                    }\r\n                });\r\n            };\r\n        }]);\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n﻿angular.module('work')\r\n    .controller('WorkListsCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workLists = $scope.workLists = store.workLists;\r\n\r\n            $scope.newWorkList = [];\r\n            $scope.editedWorkList = null;\r\n\r\n            $scope.addWorkList = function () {\r\n                var newWorkList = {\r\n                    title: $scope.newWorkList.trim()\r\n                };\r\n\r\n                if (!newWorkList.title) {\r\n                    return;\r\n                }\r\n\r\n                $scope.saving = true;\r\n                store.insert(newWorkList)\r\n                    .then(function success() {\r\n                        $scope.newWorkList = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };/////////////////////\r\n\r\n            $scope.editedWorkList = function (workList) {\r\n                $scope.editedWorkList = workList;\r\n                // Clone the original todo to restore it on demand.\r\n                $scope.originalWorkList = angular.extend({}, workList);\r\n            };\r\n\r\n            $scope.savedEdits = function (workList, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Todo edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n            }\r\n\r\n            workList.title = workList.title.trim;\r\n\r\n            if (workList.title === $scope.originalWorkList.title) {\r\n                $scope.editedWorkList = null;\r\n                return;\r\n            }\r\n\r\n            store[workList.title ? 'put' : 'delete'](workList)\r\n                .then(function success() { },\r\n                function error() {\r\n                    workList.title = $scope.editedWorkList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedWorkList = null;\r\n                });\r\n        }//////////////////////////////////////\r\n\r\n\r\n\r\n\r\n        $scope.revertEdits = function (workList) {\r\n            workLists[workLists.indexOf(workList)] = $scope.originalWorkList;\r\n            $scope.editedWorkList = null;\r\n            $scope.originalWorkList = null;\r\n            $scope.reverted = true;\r\n        }\r\n\r\n        $scope.removeWorkList = function (workList) {\r\n            store.delete(workList);\r\n            //$state.go('^');\r\n        };\r\n\r\n        $scope.saveWorkList = function (workList) {\r\n            store.put(workLists);\r\n        };\r\n\r\n        $scope.clearCompletedWorks = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n﻿angular.module('work')\r\n    .directive('titleMirror', [function () {\r\n        'use script';\r\n        \r\n        return {\r\n\r\n            template: __webpack_require__(24),\r\n            controller: \"TitleMirrorCtrl\",\r\n            resolve: {\r\n                store: ['mirrorComposer', function (mirrorComposer) {\r\n                    mirrorComposer.getStr();\r\n                    return mirrorComposer;\r\n                }]\r\n            }\r\n            \r\n        };\r\n    }]);\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n﻿(function () {\r\n    'use strict';\r\n\r\n    angular.module('work', ['ui.router', 'ngResource'])\r\n        .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\r\n        'use strict';\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('workLists', {\r\n                url: '/work-lists',\r\n                template: __webpack_require__(25),\r\n                controller: 'WorkListsCtrl',\r\n                resolve: {\r\n                    store: ['workListsStorage', function (workListsStorage) {\r\n                        workListsStorage.get();\r\n                        return workListsStorage;\r\n                    }]\r\n                }\r\n            })\r\n            .state('workLists.works', {\r\n                url: 'work-lists/:id/:status',\r\n                template: __webpack_require__(26),\r\n                controller: 'WorkCtrl',\r\n                resolve: {\r\n                    store: ['workStorage', '$stateParams', function (workStorage, $stateParams) {\r\n                        return workStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (workModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n    }]);\r\n})();\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n﻿angular.module('work')\r\n    .factory('mirrorComposer', [function () {\r\n        'use strict';\r\n\r\n        console.log('service: ');\r\n\r\n        var mirrorService = {\r\n            getStr: function () {                \r\n                return 'mirrorTest';\r\n            }\r\n\r\n\r\n        };\r\n\r\n        return mirrorService;\r\n\r\n        //var promise = new Promise(function (resolve, reject) {\r\n        //    resolve(mirrorService);\r\n        //})\r\n        //return promise;\r\n\r\n    }])\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n﻿angular.module('work')\r\n              \r\n    .factory('workListsStorage', ['$resource', function ($resource) {\r\n\r\n        'use strict';\r\n\r\n        var store = {\r\n\r\n            workLists: [],\r\n\r\n            api: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n                        \r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.workLists);\r\n                });\r\n            },\r\n\r\n\r\n\r\n            insert: function (workList) {\r\n                var originalWorkLists = store.workLists.slice(0);\r\n\r\n                return store.api.save(workList,\r\n                    function success(resp) {\r\n                        workList.id = resp.id;\r\n                        store.workLists.push(workList);\r\n                    }, function error() {\r\n                        angular.copy(originalWorkLists, store.workLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            delete: function (workList) {\r\n                var originalWorkList = store.workLists.slice(0);\r\n\r\n                store.workLists.splice(store.workLists.indexOf(workList), 1);\r\n                return store.api.delete({ id: workList.id },\r\n                    function () { },\r\n                    function error() {\r\n                        angular.copy(originalWorkList, store.workLists);\r\n                    });\r\n            },\r\n\r\n\r\n\r\n\r\n            put: function (workList) {\r\n                return store.api.update({ id: workList.id }, workList)\r\n                    .$promise;\r\n            }\r\n\r\n        };\r\n\r\n        return store;\r\n    }])\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('work')\r\n\r\n\r\n    .factory('workStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            workList: {},\r\n\r\n            api: $resource('/api/workitems/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/work-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var incompleteWorks = store.workList.works.filter(function (work) {\r\n                    return !work.completed;\r\n                });\r\n\r\n                angular.copy(incompleteWorks, store.workList.works);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.workList.id }, function () {\r\n                }, function error() {\r\n                    angular.copy(originalWorks, store.workList.works);\r\n                });\r\n            },\r\n\r\n            delete: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                store.workList.works.splice(store.workList.works.indexOf(work), 1);\r\n                return store.api.delete({ id: work.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n                    \r\n                    function (resp) {\r\n                        angular.copy(resp, store.workList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var temp =  store.api.save(work,\r\n                    function success(resp) {\r\n                        work.id = resp.id;\r\n                        store.workList.works.push(work);\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    })\r\n                    .$promise;\r\n\r\n                \r\n                return temp;\r\n            },\r\n\r\n            put: function (work) {\r\n                return store.api.update({ id: work.id }, work)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n/***/ }),\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\r\\n<ol>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/todo-lists\\\">Todo Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"todoLists\\\">Todo Lists</a></p>\\r\\n        \\r\\n    </li>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/work-lists\\\">Work Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"workLists\\\">Work Lists</a></p>\\r\\n    </li>\\r\\n</ol>\"\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>todo lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addTodoList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How todo list should be named?\\\" ng-model=\\\"newTodoList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"todoLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"todoList in todoLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: todoList == editedTodoList}\\\">\\r\\n                <!--<a ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                </a>-->\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeTodoList(todoList)\\\"></button>\\r\\n                </div>\\r\\n                <form ng-submit=\\\"saveEdits(todoList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todoList.title\\\" todo-escape=\\\"revertEdits(todoList)\\\" ng-blur=\\\"saveEdits(todoList, 'blur')\\\"\\r\\n                           todo-focus=\\\"todoList == editedTodoList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\r\\n    <section class=\\\"todoapp\\\">\\r\\n        <header class=\\\"header\\\">\\r\\n            <h1>todos</h1>\\r\\n            <form class=\\\"todo-form\\\" ng-submit=\\\"addTodo()\\\">\\r\\n                <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newTodo\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n            </form>\\r\\n        </header>\\r\\n        <section class=\\\"main\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n            <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n            <ul class=\\\"todo-list\\\">\\r\\n                <li ng-repeat=\\\"todo in todoList.todos | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: todo.completed, editing: todo == editedTodo}\\\">\\r\\n                    <div class=\\\"view\\\">\\r\\n                        <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"todo.completed\\\" ng-change=\\\"toggleCompleted(todo)\\\">\\r\\n                        <label ng-dblclick=\\\"editTodo(todo)\\\">{{todo.title}}</label>\\r\\n                        <button class=\\\"destroy\\\" ng-click=\\\"removeTodo(todo)\\\"></button>\\r\\n                    </div>\\r\\n                    <form ng-submit=\\\"saveEdits(todo, 'submit')\\\">\\r\\n                        <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todo.title\\\" todo-escape=\\\"revertEdits(todo)\\\" ng-blur=\\\"saveEdits(todo, 'blur')\\\"\\r\\n                               todo-focus=\\\"todo == editedTodo\\\">\\r\\n                    </form>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </section>\\r\\n        <footer class=\\\"footer\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <span class=\\\"todo-count\\\">\\r\\n                <strong>{{remainingCount}}</strong>\\r\\n                <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n            </span>\\r\\n            <ul class=\\\"filters\\\">\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: null})\\\" >All</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'active'})\\\" >Active</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'completed'})\\\">Completed</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedTodos()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n        </footer>\\r\\n    </section>\"\n\n/***/ }),\n/* 21 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Content_css_index_css__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Content_css_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Content_css_index_css__);\n﻿/*global angular */\r\n\r\n/**\r\n * The main TodoMVC app module\r\n *\r\n * @type {angular.Module}\r\n */\r\n\r\n\r\n\r\nangular.module('todomvc', ['ui.router', 'ngResource','work'])\r\n    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\r\n        'use strict';\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('options', {\r\n                url: '/',\r\n                template: __webpack_require__(18)\r\n            })\r\n            .state('todoLists', {\r\n                url: '/todo-lists',\r\n                template: __webpack_require__(19),\r\n                controller: 'TodoListsCtrl',\r\n                resolve: {\r\n                    store: ['todoListsStorage', function (todoListsStorage) {\r\n                        todoListsStorage.get();\r\n                        return todoListsStorage;\r\n                    }]\r\n                }\r\n            })\r\n            .state('todoLists.todos', {\r\n                url: 'todo-lists/:id/:status',\r\n                template: __webpack_require__(20),\r\n                controller: 'TodoCtrl',\r\n                resolve: {\r\n                    store: ['todoStorage', '$stateParams', function (todoStorage, $stateParams) {\r\n                        return todoStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (todoModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n\r\n    }]);\r\n\r\n\r\n__webpack_require__(2);\r\n__webpack_require__(3);\r\n\r\n__webpack_require__(4);\r\n__webpack_require__(5);\r\n\r\n\r\n__webpack_require__(1);\r\n__webpack_require__(0);\r\n\r\n\r\n__webpack_require__(10);\r\n__webpack_require__(12);\r\n__webpack_require__(13);\r\n__webpack_require__(8);\r\n__webpack_require__(7);\r\n__webpack_require__(9);\r\n__webpack_require__(11);\r\n__webpack_require__(6);\r\n\r\n\r\n\n\n/***/ }),\n/* 22 */,\n/* 23 */,\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\r\\n<span> {{mirror}} </span>\"\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>work lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWorkList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How work list should be named?\\\" ng-model=\\\"newWorkList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"workList in workLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: workList == editedWorkList}\\\"> \\r\\n\\r\\n\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"workLists.works({id:workList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editWorkList(workList)\\\">{{workList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWorkList(workList)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(workList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"workList.title\\\" work-escape=\\\"revertEdits(workList)\\\" ng-blur=\\\"saveEdits(workList, 'blur')\\\"\\r\\n                           work-focus=\\\"workList == editedWorkList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\r\\n<!--<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label> {{mirror}} </label>\\r\\n</div>-->\\r\\n<!--<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label ng-bind=\\\"mirror\\\"></label>\\r\\n</div>\\r\\n<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label ng-model=\\\"mirror\\\"></label>\\r\\n    <input ng-model=\\\"mirror\\\">\\r\\n</div>-->\\r\\n\\r\\n\\r\\n\\r\\n<!--<div class=\\\"current-title\\\" >\\r\\n    <title-mirror></title-mirror>\\r\\n</div>-->\\r\\n\\r\\n<div class=\\\"current-title\\\">\\r\\n    <label title-mirror></label>\\r\\n</div>\\r\\n\\r\\n\\r\\n \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<section class=\\\"todoapp\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>works 1</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWork()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newWork\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n\\r\\n        <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n\\r\\n        <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n\\r\\n            <li ng-repeat=\\\"work in workList.works | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: work.completed, editing: work == editedWork}\\\">\\r\\n\\r\\n                <div class=\\\"view\\\">\\r\\n                    <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"work.completed\\\" ng-change=\\\"toggleCompleted(work)\\\">\\r\\n                    <label ng-dblclick=\\\"editWork(work)\\\">{{work.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWork(work)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(work, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"work.title\\\" todo-escape=\\\"revertEdits(work)\\\" ng-blur=\\\"saveEdits(work, 'blur')\\\"\\r\\n                           work-focus=\\\"work == editedWork\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n    <footer class=\\\"footer\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n        <span class=\\\"todo-count\\\">\\r\\n            <strong>{{remainingCount}}</strong>\\r\\n            <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n        </span>\\r\\n        <ul class=\\\"filters\\\">\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"workLists.works({id:workList.id, status: null})\\\">All</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'active'})\\\">Active</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'completed'})\\\">Completed</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n        <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedWorks()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n    </footer>\\r\\n</section>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!--angular.module('docsSimpleDirective', [])\\r\\n.controller('Controller', ['$scope', function($scope) {\\r\\n  $scope.customer = {\\r\\n    name: 'Naomi',\\r\\n    address: '1600 Amphitheatre'\\r\\n  };\\r\\n}])\\r\\n.directive('myCustomer', function() {\\r\\n  return {\\r\\n    template: 'Name: {{customer.name}} Address: {{customer.address}}'\\r\\n  };\\r\\n});-->\"\n\n/***/ })\n],[21]);\n\n\n// WEBPACK FOOTER //\n// app.bundle.js","﻿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoCtrl', ['$scope', '$stateParams', '$filter','store', function ($scope, $stateParams, $filter, store) {\r\n        'use strict';\r\n\r\n        var todoList = $scope.todoList = store.todoList;\r\n\r\n        $scope.newTodo = '';\r\n        $scope.editedTodo = null;\r\n\r\n        $scope.$watch('todoList.todos', function () {\r\n            $scope.remainingCount = $filter('filter')(todoList.todos, { completed: false }).length;\r\n            $scope.completedCount = todoList.todos.length - $scope.remainingCount;\r\n            $scope.allChecked = !$scope.remainingCount;\r\n        }, true);\r\n\r\n        // Monitor the current route for changes and adjust the filter accordingly.\r\n        $scope.$on('$stateChangeSuccess', function () {\r\n            var status = $scope.status = $stateParams.status || '';\r\n\r\n            if (status === 'active') {\r\n                $scope.statusFilter = { completed: false };\r\n            }\r\n            else if (status === 'completed') {\r\n                $scope.statusFilter = { completed: true };\r\n            }\r\n            else {\r\n                $scope.statusFilter = {};\r\n            }\r\n        });\r\n\r\n        $scope.addTodo = function () {\r\n            var newTodo = {\r\n                todoListId: $stateParams.id,\r\n                title: $scope.newTodo.trim(),\r\n                completed: false\r\n            };\r\n\r\n            if (!newTodo.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodo)\r\n                .then(function success() {\r\n                    $scope.newTodo = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodo = function (todo) {\r\n            $scope.editedTodo = todo;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodo = angular.extend({}, todo);\r\n        };\r\n\r\n        $scope.saveEdits = function (todo, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todo.title = todo.title.trim();\r\n\r\n            if (todo.title === $scope.originalTodo.title) {\r\n                $scope.editedTodo = null;\r\n                return;\r\n            }\r\n\r\n            store[todo.title ? 'put' : 'delete'](todo)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.title = $scope.originalTodo.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodo = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todo) {\r\n            todoList.todos[todoList.todos.indexOf(todo)] = $scope.originalTodo;\r\n            $scope.editedTodo = null;\r\n            $scope.originalTodo = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodo = function (todo) {\r\n            store.delete(todo);\r\n        };\r\n\r\n        $scope.saveTodo = function (todo) {\r\n            store.put(todo);\r\n        };\r\n\r\n        $scope.toggleCompleted = function (todo, completed) {\r\n            if (angular.isDefined(completed)) {\r\n                todo.completed = completed;\r\n            }\r\n\r\n            store.put(todo, todoList.todos.indexOf(todo))\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.completed = !todo.completed;\r\n                });\r\n        };\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n        $scope.markAll = function (completed) {\r\n            todoList.todos.forEach(function (todo) {\r\n                if (todo.completed !== completed) {\r\n                    $scope.toggleCompleted(todo, completed);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/todoCtrl.js\n// module id = 0\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoListsCtrl', [\r\n                '$scope', '$stateParams', '$state', '$filter', 'store',\r\n                function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n        'use strict';\r\n\r\n        var todoLists = $scope.todoLists = store.todoLists;\r\n\r\n        $scope.newTodoList = '';\r\n        $scope.editedTodoList = null;\r\n\r\n        $scope.addTodoList = function () {\r\n            var newTodoList = {\r\n                title: $scope.newTodoList.trim(),\r\n            };\r\n\r\n            if (!newTodoList.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodoList)\r\n                .then(function success() {\r\n                    $scope.newTodoList = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodoList = function (todoList) {\r\n            $scope.editedTodoList = todoList;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodoList = angular.extend({}, todoList);\r\n        };\r\n\r\n        $scope.saveEdits = function (todoList, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todoList.title = todoList.title.trim();\r\n\r\n            if (todoList.title === $scope.originalTodoList.title) {\r\n                $scope.editedTodoList = null;\r\n                return;\r\n            }\r\n\r\n            store[todoList.title ? 'put' : 'delete'](todoList)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todoList.title = $scope.originalTodoList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodoList = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todoList) {\r\n            todoLists[todoLists.indexOf(todoList)] = $scope.originalTodoList;\r\n            $scope.editedTodoList = null;\r\n            $scope.originalTodoList = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodoList = function (todoList) {\r\n            store.delete(todoList);\r\n            $state.go('^');\r\n        };\r\n\r\n        $scope.saveTodoList = function (todoList) {\r\n            store.put(todoLists);\r\n        };\r\n\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/todoListsCtrl.js\n// module id = 1\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * Directive that executes an expression when the element it is applied to gets\r\n * an `escape` keydown event.\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoEscape', [function () {\r\n        'use strict';\r\n\r\n        var ESCAPE_KEY = 27;\r\n\r\n        return function (scope, elem, attrs) {\r\n            elem.bind('keydown', function (event) {\r\n                if (event.keyCode === ESCAPE_KEY) {\r\n                    scope.$apply(attrs.todoEscape);\r\n                }\r\n            });\r\n\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind('keydown');\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./directives/todoEscape.js\n// module id = 2\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * Directive that places focus on the element it is applied to when the\r\n * expression it binds to evaluates to true\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoFocus', ['$timeout', function todoFocus($timeout) {\r\n        'use strict';\r\n\r\n        return function (scope, elem, attrs) {\r\n            scope.$watch(attrs.todoFocus, function (newVal) {\r\n                if (newVal) {\r\n                    $timeout(function () {\r\n                        elem[0].focus();\r\n                    }, 0, false);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./directives/todoFocus.js\n// module id = 3\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.dfsdfsd\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n    .factory('todoListsStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n        var store = {\r\n            todoLists: [],\r\n\r\n            api: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),  \r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoLists.slice(0);\r\n\r\n                var incompleteTodos = store.todoLists.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoLists);\r\n\r\n                return store.api.delete(function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                store.todoLists.splice(store.todoLists.indexOf(todoList), 1);\r\n                return store.api.delete({ id: todoList.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    });\r\n            },\r\n\r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.todoLists);\r\n                });\r\n            },\r\n\r\n            insert: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                return store.api.save(todoList,\r\n                    function success(resp) {\r\n                        todoList.id = resp.id;\r\n                        store.todoLists.push(todoList);\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todoList) {\r\n                return store.api.update({ id: todoList.id }, todoList)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        return store;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/todoListsStorage.js\n// module id = 4\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n\r\n    .factory('todoStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            todoList: {},\r\n\r\n            api: $resource('/api/todos/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/todo-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                var incompleteTodos = store.todoList.todos.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoList.todos);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.todoList.id },function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todoList.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                store.todoList.todos.splice(store.todoList.todos.indexOf(todo), 1);\r\n                return store.api.delete({ id: todo.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n\r\n                    function (resp) {\r\n                        angular.copy(resp, store.todoList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                return store.api.save(todo,\r\n                    function success(resp) {\r\n                        todo.id = resp.id;\r\n                        store.todoList.todos.push(todo);\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todo) {\r\n                return store.api.update({ id: todo.id }, todo)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/todoStorage.js\n// module id = 5\n// module chunks = 0","﻿angular.module('work')\r\n    .controller('TitleMirrorCtrl', ['$scope', 'mirrorComposer', function ($scope, mirrorComposer) {\r\n\r\n        console.log('controller: ');\r\n        $scope.mirror = mirrorComposer.getStr();\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/controllers/titleMirrorCtrl.js\n// module id = 6\n// module chunks = 0","﻿angular.module('work')\r\n    .controller('WorkCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workList = $scope.workList = store.workList;\r\n\r\n            $scope.newWork = '';\r\n            $scope.editedWork = null;\r\n\r\n            $scope.$watch('workList.works', function () {\r\n                $scope.remainingCount = $filter('filter')(workList.works, { completed: false }).length;\r\n                $scope.completedCount = workList.works.length - $scope.remainingCount;\r\n                $scope.allChecked = !$scope.remainingCount;\r\n            }, true);\r\n\r\n            // Monitor the current route for changes and adjust the filter accordingly.\r\n            $scope.$on('$stateChangeSuccess', function () {\r\n                var status = $scope.status = $stateParams.status || '';\r\n\r\n                if (status === 'active') {\r\n                    $scope.statusFilter = { completed: false };\r\n                }\r\n                else if (status === 'completed') {\r\n                    $scope.statusFilter = { completed: true };\r\n                }\r\n                else {\r\n                    $scope.statusFilter = {};\r\n                }\r\n            });\r\n\r\n            $scope.addWork = function () {\r\n                var newWork = {\r\n                    workListId: $stateParams.id,\r\n                    title: $scope.newWork.trim(),\r\n                    completed: false\r\n                };\r\n\r\n                if (!newWork.title) {\r\n                    return;\r\n                }\r\n                \r\n\r\n                $scope.saving = true;\r\n                store.insert(newWork)\r\n                    .then(function success() {\r\n                        $scope.newWork = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };\r\n\r\n            $scope.editWork = function (work) {\r\n\r\n                $scope.newWork = '';\r\n\r\n\r\n                $scope.editedWork = work;\r\n                // Clone the original work to restore it on demand.\r\n                $scope.originalWork = angular.extend({}, work);\r\n            };\r\n\r\n            $scope.saveEdits = function (work, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Work edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n                    return;\r\n                }\r\n\r\n                work.title = work.title.trim();\r\n\r\n                if (work.title === $scope.originalWork.title) {\r\n                    $scope.editedWork = null;\r\n                    return;\r\n                }\r\n\r\n                store[work.title ? 'put' : 'delete'](work)\r\n                    .then(function success() {\r\n                    }, function error() {\r\n                        work.title = $scope.originalWork.title;\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.editedWork = null;\r\n                    });\r\n            };\r\n\r\n            $scope.revertEdits = function (work) {\r\n                workList.works[workList.works.indexOf(work)] = $scope.originalWork;\r\n                $scope.editedWork = null;\r\n                $scope.originalWork = null;\r\n                $scope.reverted = true;\r\n            };\r\n\r\n            $scope.removeWork = function (work) {\r\n                store.delete(work);\r\n            };\r\n\r\n            $scope.saveWork = function (work) {\r\n                store.put(work);\r\n            };\r\n\r\n            $scope.toggleCompleted = function (work, completed) {\r\n                if (angular.isDefined(completed)) {\r\n                    work.completed = completed;\r\n                }\r\n\r\n                store.put(work)\r\n                    .then(function (response) {\r\n                    //console.log(response);\r\n                    }).catch(function (error) {\r\n                    work.completed = !work.completed;\r\n                    //console.log(error);\r\n                });\r\n            };\r\n\r\n            $scope.clearCompletedWorks = function () {\r\n                store.clearCompleted();\r\n            };\r\n\r\n            $scope.markAll = function (completed) {\r\n                workList.works.forEach(function (work) {\r\n                    if (work.completed !== completed) {\r\n                        $scope.toggleCompleted(work, completed);\r\n                    }\r\n                });\r\n            };\r\n        }]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/controllers/workCtrl.js\n// module id = 7\n// module chunks = 0","﻿angular.module('work')\r\n    .controller('WorkListsCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workLists = $scope.workLists = store.workLists;\r\n\r\n            $scope.newWorkList = [];\r\n            $scope.editedWorkList = null;\r\n\r\n            $scope.addWorkList = function () {\r\n                var newWorkList = {\r\n                    title: $scope.newWorkList.trim()\r\n                };\r\n\r\n                if (!newWorkList.title) {\r\n                    return;\r\n                }\r\n\r\n                $scope.saving = true;\r\n                store.insert(newWorkList)\r\n                    .then(function success() {\r\n                        $scope.newWorkList = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };/////////////////////\r\n\r\n            $scope.editedWorkList = function (workList) {\r\n                $scope.editedWorkList = workList;\r\n                // Clone the original todo to restore it on demand.\r\n                $scope.originalWorkList = angular.extend({}, workList);\r\n            };\r\n\r\n            $scope.savedEdits = function (workList, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Todo edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n            }\r\n\r\n            workList.title = workList.title.trim;\r\n\r\n            if (workList.title === $scope.originalWorkList.title) {\r\n                $scope.editedWorkList = null;\r\n                return;\r\n            }\r\n\r\n            store[workList.title ? 'put' : 'delete'](workList)\r\n                .then(function success() { },\r\n                function error() {\r\n                    workList.title = $scope.editedWorkList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedWorkList = null;\r\n                });\r\n        }//////////////////////////////////////\r\n\r\n\r\n\r\n\r\n        $scope.revertEdits = function (workList) {\r\n            workLists[workLists.indexOf(workList)] = $scope.originalWorkList;\r\n            $scope.editedWorkList = null;\r\n            $scope.originalWorkList = null;\r\n            $scope.reverted = true;\r\n        }\r\n\r\n        $scope.removeWorkList = function (workList) {\r\n            store.delete(workList);\r\n            //$state.go('^');\r\n        };\r\n\r\n        $scope.saveWorkList = function (workList) {\r\n            store.put(workLists);\r\n        };\r\n\r\n        $scope.clearCompletedWorks = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/controllers/workListsCtrl.js\n// module id = 8\n// module chunks = 0","﻿angular.module('work')\r\n    .directive('titleMirror', [function () {\r\n        'use script';\r\n        \r\n        return {\r\n\r\n            template: require('../templates/mirror.html'),\r\n            controller: \"TitleMirrorCtrl\",\r\n            resolve: {\r\n                store: ['mirrorComposer', function (mirrorComposer) {\r\n                    mirrorComposer.getStr();\r\n                    return mirrorComposer;\r\n                }]\r\n            }\r\n            \r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/directives/titleMirror.js\n// module id = 9\n// module chunks = 0","﻿(function () {\r\n    'use strict';\r\n\r\n    angular.module('work', ['ui.router', 'ngResource'])\r\n        .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\r\n        'use strict';\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('workLists', {\r\n                url: '/work-lists',\r\n                template: require('./templates/work-lists.html'),\r\n                controller: 'WorkListsCtrl',\r\n                resolve: {\r\n                    store: ['workListsStorage', function (workListsStorage) {\r\n                        workListsStorage.get();\r\n                        return workListsStorage;\r\n                    }]\r\n                }\r\n            })\r\n            .state('workLists.works', {\r\n                url: 'work-lists/:id/:status',\r\n                template: require('./templates/works.html'),\r\n                controller: 'WorkCtrl',\r\n                resolve: {\r\n                    store: ['workStorage', '$stateParams', function (workStorage, $stateParams) {\r\n                        return workStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (workModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n    }]);\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/index.js\n// module id = 10\n// module chunks = 0","﻿angular.module('work')\r\n    .factory('mirrorComposer', [function () {\r\n        'use strict';\r\n\r\n        console.log('service: ');\r\n\r\n        var mirrorService = {\r\n            getStr: function () {                \r\n                return 'mirrorTest';\r\n            }\r\n\r\n\r\n        };\r\n\r\n        return mirrorService;\r\n\r\n        //var promise = new Promise(function (resolve, reject) {\r\n        //    resolve(mirrorService);\r\n        //})\r\n        //return promise;\r\n\r\n    }])\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/services/mirrorComposer.js\n// module id = 11\n// module chunks = 0","﻿angular.module('work')\r\n              \r\n    .factory('workListsStorage', ['$resource', function ($resource) {\r\n\r\n        'use strict';\r\n\r\n        var store = {\r\n\r\n            workLists: [],\r\n\r\n            api: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n                        \r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.workLists);\r\n                });\r\n            },\r\n\r\n\r\n\r\n            insert: function (workList) {\r\n                var originalWorkLists = store.workLists.slice(0);\r\n\r\n                return store.api.save(workList,\r\n                    function success(resp) {\r\n                        workList.id = resp.id;\r\n                        store.workLists.push(workList);\r\n                    }, function error() {\r\n                        angular.copy(originalWorkLists, store.workLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            delete: function (workList) {\r\n                var originalWorkList = store.workLists.slice(0);\r\n\r\n                store.workLists.splice(store.workLists.indexOf(workList), 1);\r\n                return store.api.delete({ id: workList.id },\r\n                    function () { },\r\n                    function error() {\r\n                        angular.copy(originalWorkList, store.workLists);\r\n                    });\r\n            },\r\n\r\n\r\n\r\n\r\n            put: function (workList) {\r\n                return store.api.update({ id: workList.id }, workList)\r\n                    .$promise;\r\n            }\r\n\r\n        };\r\n\r\n        return store;\r\n    }])\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/services/workListsStorage.js\n// module id = 12\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('work')\r\n\r\n\r\n    .factory('workStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            workList: {},\r\n\r\n            api: $resource('/api/workitems/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/work-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var incompleteWorks = store.workList.works.filter(function (work) {\r\n                    return !work.completed;\r\n                });\r\n\r\n                angular.copy(incompleteWorks, store.workList.works);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.workList.id }, function () {\r\n                }, function error() {\r\n                    angular.copy(originalWorks, store.workList.works);\r\n                });\r\n            },\r\n\r\n            delete: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                store.workList.works.splice(store.workList.works.indexOf(work), 1);\r\n                return store.api.delete({ id: work.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n                    \r\n                    function (resp) {\r\n                        angular.copy(resp, store.workList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var temp =  store.api.save(work,\r\n                    function success(resp) {\r\n                        work.id = resp.id;\r\n                        store.workList.works.push(work);\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    })\r\n                    .$promise;\r\n\r\n                \r\n                return temp;\r\n            },\r\n\r\n            put: function (work) {\r\n                return store.api.update({ id: work.id }, work)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/services/workStorage.js\n// module id = 13\n// module chunks = 0","module.exports = \"\\r\\n<ol>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/todo-lists\\\">Todo Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"todoLists\\\">Todo Lists</a></p>\\r\\n        \\r\\n    </li>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/work-lists\\\">Work Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"workLists\\\">Work Lists</a></p>\\r\\n    </li>\\r\\n</ol>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/options.html\n// module id = 18\n// module chunks = 0","module.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>todo lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addTodoList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How todo list should be named?\\\" ng-model=\\\"newTodoList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"todoLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"todoList in todoLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: todoList == editedTodoList}\\\">\\r\\n                <!--<a ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                </a>-->\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeTodoList(todoList)\\\"></button>\\r\\n                </div>\\r\\n                <form ng-submit=\\\"saveEdits(todoList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todoList.title\\\" todo-escape=\\\"revertEdits(todoList)\\\" ng-blur=\\\"saveEdits(todoList, 'blur')\\\"\\r\\n                           todo-focus=\\\"todoList == editedTodoList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/todo-lists.html\n// module id = 19\n// module chunks = 0","module.exports = \"\\r\\n    <section class=\\\"todoapp\\\">\\r\\n        <header class=\\\"header\\\">\\r\\n            <h1>todos</h1>\\r\\n            <form class=\\\"todo-form\\\" ng-submit=\\\"addTodo()\\\">\\r\\n                <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newTodo\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n            </form>\\r\\n        </header>\\r\\n        <section class=\\\"main\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n            <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n            <ul class=\\\"todo-list\\\">\\r\\n                <li ng-repeat=\\\"todo in todoList.todos | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: todo.completed, editing: todo == editedTodo}\\\">\\r\\n                    <div class=\\\"view\\\">\\r\\n                        <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"todo.completed\\\" ng-change=\\\"toggleCompleted(todo)\\\">\\r\\n                        <label ng-dblclick=\\\"editTodo(todo)\\\">{{todo.title}}</label>\\r\\n                        <button class=\\\"destroy\\\" ng-click=\\\"removeTodo(todo)\\\"></button>\\r\\n                    </div>\\r\\n                    <form ng-submit=\\\"saveEdits(todo, 'submit')\\\">\\r\\n                        <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todo.title\\\" todo-escape=\\\"revertEdits(todo)\\\" ng-blur=\\\"saveEdits(todo, 'blur')\\\"\\r\\n                               todo-focus=\\\"todo == editedTodo\\\">\\r\\n                    </form>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </section>\\r\\n        <footer class=\\\"footer\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <span class=\\\"todo-count\\\">\\r\\n                <strong>{{remainingCount}}</strong>\\r\\n                <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n            </span>\\r\\n            <ul class=\\\"filters\\\">\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: null})\\\" >All</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'active'})\\\" >Active</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'completed'})\\\">Completed</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedTodos()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n        </footer>\\r\\n    </section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/todos.html\n// module id = 20\n// module chunks = 0","﻿/*global angular */\r\n\r\n/**\r\n * The main TodoMVC app module\r\n *\r\n * @type {angular.Module}\r\n */\r\n\r\nimport '../Content/css/index.css';\r\n\r\nangular.module('todomvc', ['ui.router', 'ngResource','work'])\r\n    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\r\n        'use strict';\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('options', {\r\n                url: '/',\r\n                template: require('./templates/options.html')\r\n            })\r\n            .state('todoLists', {\r\n                url: '/todo-lists',\r\n                template: require('./templates/todo-lists.html'),\r\n                controller: 'TodoListsCtrl',\r\n                resolve: {\r\n                    store: ['todoListsStorage', function (todoListsStorage) {\r\n                        todoListsStorage.get();\r\n                        return todoListsStorage;\r\n                    }]\r\n                }\r\n            })\r\n            .state('todoLists.todos', {\r\n                url: 'todo-lists/:id/:status',\r\n                template: require('./templates/todos.html'),\r\n                controller: 'TodoCtrl',\r\n                resolve: {\r\n                    store: ['todoStorage', '$stateParams', function (todoStorage, $stateParams) {\r\n                        return todoStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (todoModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n\r\n    }]);\r\n\r\n\r\nrequire('./directives/todoEscape');\r\nrequire('./directives/todoFocus');\r\n\r\nrequire('./services/todoListsStorage');\r\nrequire('./services/todoStorage');\r\n\r\n\r\nrequire('./controllers/todoListsCtrl');\r\nrequire('./controllers/todoCtrl');\r\n\r\n\r\nrequire('./work');\r\nrequire('./work/services/workListsStorage');\r\nrequire('./work/services/workStorage');\r\nrequire('./work/controllers/workListsCtrl');\r\nrequire('./work/controllers/workCtrl');\r\nrequire('./work/directives/titleMirror');\r\nrequire('./work/services/mirrorComposer');\r\nrequire('./work/controllers/titleMirrorCtrl');\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.js\n// module id = 21\n// module chunks = 0","module.exports = \"\\r\\n<span> {{mirror}} </span>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/templates/mirror.html\n// module id = 24\n// module chunks = 0","module.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>work lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWorkList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How work list should be named?\\\" ng-model=\\\"newWorkList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"workList in workLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: workList == editedWorkList}\\\"> \\r\\n\\r\\n\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"workLists.works({id:workList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editWorkList(workList)\\\">{{workList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWorkList(workList)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(workList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"workList.title\\\" work-escape=\\\"revertEdits(workList)\\\" ng-blur=\\\"saveEdits(workList, 'blur')\\\"\\r\\n                           work-focus=\\\"workList == editedWorkList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/templates/work-lists.html\n// module id = 25\n// module chunks = 0","module.exports = \"\\r\\n<!--<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label> {{mirror}} </label>\\r\\n</div>-->\\r\\n<!--<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label ng-bind=\\\"mirror\\\"></label>\\r\\n</div>\\r\\n<div class=\\\"current-title\\\" ng-controller=\\\"TitleMirrorCtrl\\\">\\r\\n    <label ng-model=\\\"mirror\\\"></label>\\r\\n    <input ng-model=\\\"mirror\\\">\\r\\n</div>-->\\r\\n\\r\\n\\r\\n\\r\\n<!--<div class=\\\"current-title\\\" >\\r\\n    <title-mirror></title-mirror>\\r\\n</div>-->\\r\\n\\r\\n<div class=\\\"current-title\\\">\\r\\n    <label title-mirror></label>\\r\\n</div>\\r\\n\\r\\n\\r\\n \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<section class=\\\"todoapp\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>works 1</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWork()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newWork\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n\\r\\n        <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n\\r\\n        <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n\\r\\n            <li ng-repeat=\\\"work in workList.works | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: work.completed, editing: work == editedWork}\\\">\\r\\n\\r\\n                <div class=\\\"view\\\">\\r\\n                    <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"work.completed\\\" ng-change=\\\"toggleCompleted(work)\\\">\\r\\n                    <label ng-dblclick=\\\"editWork(work)\\\">{{work.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWork(work)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(work, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"work.title\\\" todo-escape=\\\"revertEdits(work)\\\" ng-blur=\\\"saveEdits(work, 'blur')\\\"\\r\\n                           work-focus=\\\"work == editedWork\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n    <footer class=\\\"footer\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n        <span class=\\\"todo-count\\\">\\r\\n            <strong>{{remainingCount}}</strong>\\r\\n            <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n        </span>\\r\\n        <ul class=\\\"filters\\\">\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"workLists.works({id:workList.id, status: null})\\\">All</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'active'})\\\">Active</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'completed'})\\\">Completed</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n        <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedWorks()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n    </footer>\\r\\n</section>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!--angular.module('docsSimpleDirective', [])\\r\\n.controller('Controller', ['$scope', function($scope) {\\r\\n  $scope.customer = {\\r\\n    name: 'Naomi',\\r\\n    address: '1600 Amphitheatre'\\r\\n  };\\r\\n}])\\r\\n.directive('myCustomer', function() {\\r\\n  return {\\r\\n    template: 'Name: {{customer.name}} Address: {{customer.address}}'\\r\\n  };\\r\\n});-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./work/templates/works.html\n// module id = 26\n// module chunks = 0"],"sourceRoot":""}