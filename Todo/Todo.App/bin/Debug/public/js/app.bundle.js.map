{"version":3,"sources":["webpack:///./controllers/todoCtrl.js","webpack:///./controllers/todoListsCtrl.js","webpack:///./controllers/workCtrl.js","webpack:///./controllers/workListsCtrl.js","webpack:///./directives/todoEscape.js","webpack:///./directives/todoFocus.js","webpack:///./services/todoListsStorage.js","webpack:///./services/todoStorage.js","webpack:///./services/workListsStorage.js","webpack:///./services/workStorage.js","webpack:///../Content/css/index.css?e63b","webpack:///./templates/options.html","webpack:///./templates/todo-lists.html","webpack:///./templates/todos.html","webpack:///./templates/work-lists.html","webpack:///./templates/works.html","webpack:///./app.js"],"names":[],"mappings":";;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,uEAAuE,mBAAmB;AAC1F;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;;;;;;ACvIL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,KAAK;;;;;;;AClGL;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,2EAA2E,mBAAmB;AAC9F;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS,G;;;;;;ACrIT;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,cAAc;;AAEd;AACA;AACA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,SAAS;;;;;AAKT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK,G;;;;;;AC5FL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AA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","file":"app.bundle.js","sourcesContent":["ï»¿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoCtrl', ['$scope', '$stateParams', '$filter','store', function ($scope, $stateParams, $filter, store) {\r\n        'use strict';\r\n\r\n        var todoList = $scope.todoList = store.todoList;\r\n\r\n        $scope.newTodo = '';\r\n        $scope.editedTodo = null;\r\n\r\n        $scope.$watch('todoList.todos', function () {\r\n            $scope.remainingCount = $filter('filter')(todoList.todos, { completed: false }).length;\r\n            $scope.completedCount = todoList.todos.length - $scope.remainingCount;\r\n            $scope.allChecked = !$scope.remainingCount;\r\n        }, true);\r\n\r\n        // Monitor the current route for changes and adjust the filter accordingly.\r\n        $scope.$on('$stateChangeSuccess', function () {\r\n            var status = $scope.status = $stateParams.status || '';\r\n\r\n            if (status === 'active') {\r\n                $scope.statusFilter = { completed: false };\r\n            }\r\n            else if (status === 'completed') {\r\n                $scope.statusFilter = { completed: true };\r\n            }\r\n            else {\r\n                $scope.statusFilter = {};\r\n            }\r\n        });\r\n\r\n        $scope.addTodo = function () {\r\n            var newTodo = {\r\n                todoListId: $stateParams.id,\r\n                title: $scope.newTodo.trim(),\r\n                completed: false\r\n            };\r\n\r\n            if (!newTodo.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodo)\r\n                .then(function success() {\r\n                    $scope.newTodo = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodo = function (todo) {\r\n            $scope.editedTodo = todo;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodo = angular.extend({}, todo);\r\n        };\r\n\r\n        $scope.saveEdits = function (todo, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todo.title = todo.title.trim();\r\n\r\n            if (todo.title === $scope.originalTodo.title) {\r\n                $scope.editedTodo = null;\r\n                return;\r\n            }\r\n\r\n            store[todo.title ? 'put' : 'delete'](todo)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.title = $scope.originalTodo.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodo = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todo) {\r\n            todoList.todos[todoList.todos.indexOf(todo)] = $scope.originalTodo;\r\n            $scope.editedTodo = null;\r\n            $scope.originalTodo = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodo = function (todo) {\r\n            store.delete(todo);\r\n        };\r\n\r\n        $scope.saveTodo = function (todo) {\r\n            store.put(todo);\r\n        };\r\n\r\n        $scope.toggleCompleted = function (todo, completed) {\r\n            if (angular.isDefined(completed)) {\r\n                todo.completed = completed;\r\n            }\r\n\r\n            store.put(todo, todoList.todos.indexOf(todo))\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todo.completed = !todo.completed;\r\n                });\r\n        };\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n        $scope.markAll = function (completed) {\r\n            todoList.todos.forEach(function (todo) {\r\n                if (todo.completed !== completed) {\r\n                    $scope.toggleCompleted(todo, completed);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/todoCtrl.js\n// module id = 0\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * The main controller for the app. The controller:\r\n * - retrieves and persists the model via the todoStorage service\r\n * - exposes the model to the template and provides event handlers\r\n */\r\nangular.module('todomvc')\r\n    .controller('TodoListsCtrl', [\r\n                '$scope', '$stateParams', '$state', '$filter', 'store',\r\n                function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n        'use strict';\r\n\r\n        var todoLists = $scope.todoLists = store.todoLists;\r\n\r\n        $scope.newTodoList = '';\r\n        $scope.editedTodoList = null;\r\n\r\n        $scope.addTodoList = function () {\r\n            var newTodoList = {\r\n                title: $scope.newTodoList.trim(),\r\n            };\r\n\r\n            if (!newTodoList.title) {\r\n                return;\r\n            }\r\n\r\n            $scope.saving = true;\r\n            store.insert(newTodoList)\r\n                .then(function success() {\r\n                    $scope.newTodoList = '';\r\n                })\r\n                .finally(function () {\r\n                    $scope.saving = false;\r\n                });\r\n        };\r\n\r\n        $scope.editTodoList = function (todoList) {\r\n            $scope.editedTodoList = todoList;\r\n            // Clone the original todo to restore it on demand.\r\n            $scope.originalTodoList = angular.extend({}, todoList);\r\n        };\r\n\r\n        $scope.saveEdits = function (todoList, event) {\r\n            // Blur events are automatically triggered after the form submit event.\r\n            // This does some unfortunate logic handling to prevent saving twice.\r\n            if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                $scope.saveEvent = null;\r\n                return;\r\n            }\r\n\r\n            $scope.saveEvent = event;\r\n\r\n            if ($scope.reverted) {\r\n                // Todo edits were reverted-- don't save.\r\n                $scope.reverted = null;\r\n                return;\r\n            }\r\n\r\n            todoList.title = todoList.title.trim();\r\n\r\n            if (todoList.title === $scope.originalTodoList.title) {\r\n                $scope.editedTodoList = null;\r\n                return;\r\n            }\r\n\r\n            store[todoList.title ? 'put' : 'delete'](todoList)\r\n                .then(function success() {\r\n                }, function error() {\r\n                    todoList.title = $scope.originalTodoList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedTodoList = null;\r\n                });\r\n        };\r\n\r\n        $scope.revertEdits = function (todoList) {\r\n            todoLists[todoLists.indexOf(todoList)] = $scope.originalTodoList;\r\n            $scope.editedTodoList = null;\r\n            $scope.originalTodoList = null;\r\n            $scope.reverted = true;\r\n        };\r\n\r\n        $scope.removeTodoList = function (todoList) {\r\n            store.delete(todoList);\r\n            $state.go('^');\r\n        };\r\n\r\n        $scope.saveTodoList = function (todoList) {\r\n            store.put(todoLists);\r\n        };\r\n\r\n\r\n        $scope.clearCompletedTodos = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/todoListsCtrl.js\n// module id = 1\n// module chunks = 0","ï»¿angular.module('todomvc')\r\n    .controller('WorkCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workList = $scope.workList = store.workList;\r\n\r\n            $scope.newWork = '';\r\n            $scope.editedWork = null;\r\n\r\n            $scope.$watch('workList.works', function () {\r\n                $scope.remainingCount = $filter('filter')(workList.works, { completed: false }).length;\r\n                $scope.completedCount = workList.works.length - $scope.remainingCount;\r\n                $scope.allChecked = !$scope.remainingCount;\r\n            }, true);\r\n\r\n            // Monitor the current route for changes and adjust the filter accordingly.\r\n            $scope.$on('$stateChangeSuccess', function () {\r\n                var status = $scope.status = $stateParams.status || '';\r\n\r\n                if (status === 'active') {\r\n                    $scope.statusFilter = { completed: false };\r\n                }\r\n                else if (status === 'completed') {\r\n                    $scope.statusFilter = { completed: true };\r\n                }\r\n                else {\r\n                    $scope.statusFilter = {};\r\n                }\r\n            });\r\n\r\n            $scope.addWork = function () {\r\n                var newWork = {\r\n                    workListId: $stateParams.id,\r\n                    title: $scope.newWork.trim(),\r\n                    completed: false\r\n                };\r\n\r\n                if (!newWork.title) {\r\n                    return;\r\n                }\r\n\r\n                $scope.saving = true;\r\n                store.insert(newWork)\r\n                    .then(function success() {\r\n                        $scope.newWork = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };\r\n\r\n            $scope.editWork = function (work) {\r\n                $scope.editedWork = work;\r\n                // Clone the original work to restore it on demand.\r\n                $scope.originalWork = angular.extend({}, work);\r\n            };\r\n\r\n            $scope.saveEdits = function (work, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Work edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n                    return;\r\n                }\r\n\r\n                work.title = work.title.trim();\r\n\r\n                if (work.title === $scope.originalWork.title) {\r\n                    $scope.editedWork = null;\r\n                    return;\r\n                }\r\n\r\n                store[work.title ? 'put' : 'delete'](work)\r\n                    .then(function success() {\r\n                    }, function error() {\r\n                        work.title = $scope.originalWork.title;\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.editedWork = null;\r\n                    });\r\n            };\r\n\r\n            $scope.revertEdits = function (work) {\r\n                workList.works[workList.works.indexOf(work)] = $scope.originalWork;\r\n                $scope.editedWork = null;\r\n                $scope.originalWork = null;\r\n                $scope.reverted = true;\r\n            };\r\n\r\n            $scope.removeWork = function (work) {\r\n                store.delete(work);\r\n            };\r\n\r\n            $scope.saveWork = function (work) {\r\n                store.put(work);\r\n            };\r\n\r\n            $scope.toggleCompleted = function (work, completed) {\r\n                if (angular.isDefined(completed)) {\r\n                    work.completed = completed;\r\n                }\r\n                console.log('start');\r\n\r\n                store.put(work).then((response) => {\r\n                    console.log(response);\r\n                }).catch((error) => {\r\n                    work.completed = !work.completed;\r\n                    console.log(error);\r\n                })\r\n            };\r\n\r\n            $scope.clearCompletedWorks = function () {\r\n                store.clearCompleted();\r\n            };\r\n\r\n            $scope.markAll = function (completed) {\r\n                workList.works.forEach(function (work) {\r\n                    if (work.completed !== completed) {\r\n                        $scope.toggleCompleted(work, completed);\r\n                    }\r\n                });\r\n            };\r\n        }]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/workCtrl.js\n// module id = 2\n// module chunks = 0","ï»¿angular.module('todomvc')\r\n    .controller('WorkListsCtrl', [\r\n        '$scope', '$stateParams', '$state', '$filter', 'store',\r\n        function ($scope, $stateParams, $state, $filter, store) {\r\n\r\n            'use strict';\r\n\r\n            var workLists = $scope.workLists = store.workLists;\r\n\r\n            $scope.newWorkList = [];\r\n            $scope.editedWorkList = null;\r\n\r\n            $scope.addWorkList = function () {\r\n                var newWorkList = {\r\n                    title: $scope.newWorkList.trim()\r\n                };\r\n\r\n                if (!newWorkList.title) {\r\n                    return;\r\n                }\r\n\r\n                $scope.saving = true;\r\n                store.insert(newWorkList)\r\n                    .then(function success() {\r\n                        $scope.newWorkList = '';\r\n                    })\r\n                    .finally(function () {\r\n                        $scope.saving = false;\r\n                    });\r\n            };/////////////////////\r\n\r\n            $scope.editedWorkList = function (workList) {\r\n                $scope.editedWorkList = workList;\r\n                // Clone the original todo to restore it on demand.\r\n                $scope.originalWorkList = angular.extend({}, workList);\r\n            };\r\n\r\n            $scope.savedEdits = function (workList, event) {\r\n                // Blur events are automatically triggered after the form submit event.\r\n                // This does some unfortunate logic handling to prevent saving twice.\r\n                if (event === 'blur' && $scope.saveEvent === 'submit') {\r\n                    $scope.saveEvent = null;\r\n                    return;\r\n                }\r\n\r\n                $scope.saveEvent = event;\r\n\r\n                if ($scope.reverted) {\r\n                    // Todo edits were reverted-- don't save.\r\n                    $scope.reverted = null;\r\n            }\r\n\r\n            workList.title = workList.title.trim;\r\n\r\n            if (workList.title === $scope.originalWorkList.title) {\r\n                $scope.editedWorkList = null;\r\n                return;\r\n            }\r\n\r\n            store[workList.title ? 'put' : 'delete'](workList)\r\n                .then(function success() { },\r\n                function error() {\r\n                    workList.title = $scope.editedWorkList.title;\r\n                })\r\n                .finally(function () {\r\n                    $scope.editedWorkList = null;\r\n                });\r\n        }//////////////////////////////////////\r\n\r\n\r\n\r\n\r\n        $scope.revertEdits = function (workList) {\r\n            workLists[workLists.indexOf(workList)] = $scope.originalWorkList;\r\n            $scope.editedWorkList = null;\r\n            $scope.originalWorkList = null;\r\n            $scope.reverted = true;\r\n        }\r\n\r\n        $scope.removeWorkList = function (workList) {\r\n            store.delete(workList);\r\n            $state.go('^');\r\n        };\r\n\r\n        $scope.saveWorkList = function (workList) {\r\n            store.put(workLists);\r\n        };\r\n\r\n        $scope.clearCompletedWorks = function () {\r\n            store.clearCompleted();\r\n        };\r\n\r\n    }]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./controllers/workListsCtrl.js\n// module id = 3\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * Directive that executes an expression when the element it is applied to gets\r\n * an `escape` keydown event.\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoEscape', [function () {\r\n        'use strict';\r\n\r\n        var ESCAPE_KEY = 27;\r\n\r\n        return function (scope, elem, attrs) {\r\n            elem.bind('keydown', function (event) {\r\n                if (event.keyCode === ESCAPE_KEY) {\r\n                    scope.$apply(attrs.todoEscape);\r\n                }\r\n            });\r\n\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind('keydown');\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./directives/todoEscape.js\n// module id = 4\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * Directive that places focus on the element it is applied to when the\r\n * expression it binds to evaluates to true\r\n */\r\nangular.module('todomvc')\r\n    .directive('todoFocus', ['$timeout', function todoFocus($timeout) {\r\n        'use strict';\r\n\r\n        return function (scope, elem, attrs) {\r\n            scope.$watch(attrs.todoFocus, function (newVal) {\r\n                if (newVal) {\r\n                    $timeout(function () {\r\n                        elem[0].focus();\r\n                    }, 0, false);\r\n                }\r\n            });\r\n        };\r\n    }]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./directives/todoFocus.js\n// module id = 5\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.dfsdfsd\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n    .factory('todoListsStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n        var store = {\r\n            todoLists: [],\r\n\r\n            api: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),  \r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoLists.slice(0);\r\n\r\n                var incompleteTodos = store.todoLists.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoLists);\r\n\r\n                return store.api.delete(function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                store.todoLists.splice(store.todoLists.indexOf(todoList), 1);\r\n                return store.api.delete({ id: todoList.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    });\r\n            },\r\n\r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.todoLists);\r\n                });\r\n            },\r\n\r\n            insert: function (todoList) {\r\n                var originalTodoLists = store.todoLists.slice(0);\r\n\r\n                return store.api.save(todoList,\r\n                    function success(resp) {\r\n                        todoList.id = resp.id;\r\n                        store.todoLists.push(todoList);\r\n                    }, function error() {\r\n                        angular.copy(originalTodoLists, store.todoLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todoList) {\r\n                return store.api.update({ id: todoList.id }, todoList)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        return store;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/todoListsStorage.js\n// module id = 6\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n\r\n    .factory('todoStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            todoList: {},\r\n\r\n            api: $resource('/api/todos/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/todo-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/todo-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                var incompleteTodos = store.todoList.todos.filter(function (todo) {\r\n                    return !todo.completed;\r\n                });\r\n\r\n                angular.copy(incompleteTodos, store.todoList.todos);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.todoList.id },function () {\r\n                }, function error() {\r\n                    angular.copy(originalTodos, store.todoList.todos);\r\n                });\r\n            },\r\n\r\n            delete: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                store.todoList.todos.splice(store.todoList.todos.indexOf(todo), 1);\r\n                return store.api.delete({ id: todo.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n\r\n                    function (resp) {\r\n                        angular.copy(resp, store.todoList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (todo) {\r\n                var originalTodos = store.todoList.todos.slice(0);\r\n\r\n                return store.api.save(todo,\r\n                    function success(resp) {\r\n                        todo.id = resp.id;\r\n                        store.todoList.todos.push(todo);\r\n                    }, function error() {\r\n                        angular.copy(originalTodos, store.todoList.todos);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            put: function (todo) {\r\n                return store.api.update({ id: todo.id }, todo)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/todoStorage.js\n// module id = 7\n// module chunks = 0","ï»¿angular.module('todomvc')\r\n              \r\n    .factory('workListsStorage', ['$resource', function ($resource) {\r\n\r\n        'use strict';\r\n\r\n        var store = {\r\n\r\n            workLists: [],\r\n\r\n            api: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' },\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n                        \r\n            get: function () {\r\n                return store.api.query(function (resp) {\r\n                    angular.copy(resp, store.workLists);\r\n                });\r\n            },\r\n\r\n\r\n\r\n            insert: function (workList) {\r\n                var originalWorkLists = store.workLists.slice(0);\r\n\r\n                return store.api.save(workList,\r\n                    function success(resp) {\r\n                        workList.id = resp.id;\r\n                        store.workLists.push(workList);\r\n                    }, function error() {\r\n                        angular.copy(originalWorkLists, store.workLists);\r\n                    })\r\n                    .$promise;\r\n            },\r\n\r\n            delete: function (workList) {\r\n                var originalWorkList = store.workLists.slice(0);\r\n\r\n                store.workLists.splice(store.workLists.indexOf(workList), 1);\r\n                return store.api.delete({ id: workList.id },\r\n                    function () { },\r\n                    function error() {\r\n                        angular.copy(originalWorkList, store.workLists);\r\n                    });\r\n            },\r\n\r\n\r\n\r\n\r\n            put: function (workList) {\r\n                return store.api.update({ id: workList.id }, workList)\r\n                    .$promise;\r\n            }\r\n\r\n        };\r\n\r\n        return store;\r\n    }])\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/workListsStorage.js\n// module id = 8\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * Services that persists and retrieves todos from localStorage or a backend API\r\n * if available.\r\n *\r\n * They both follow the same API, returning promises for all changes to the\r\n * model.\r\n */\r\nangular.module('todomvc')\r\n\r\n\r\n    .factory('workStorage', ['$resource', function ($resource) {\r\n        'use strict';\r\n\r\n\r\n        var store = {\r\n            workList: {},\r\n\r\n            api: $resource('/api/workitems/:id', null,\r\n                {\r\n                    save: { method: 'POST' },\r\n                    update: { method: 'PUT' },\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            listApi: $resource('/api/work-lists/:id', null,\r\n                {\r\n                    get: { method: 'GET' }\r\n                }\r\n            ),\r\n            listClearCompletedApi: $resource('/api/work-lists/:id/clear-completed', null,\r\n                {\r\n                    delete: { method: 'DELETE' }\r\n                }\r\n            ),\r\n\r\n            clearCompleted: function () {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var incompleteWorks = store.workList.works.filter(function (work) {\r\n                    return !work.completed;\r\n                });\r\n\r\n                angular.copy(incompleteWorks, store.workList.works);\r\n\r\n                return store.listClearCompletedApi.delete({ id: store.workList.id }, function () {\r\n                }, function error() {\r\n                    angular.copy(originalWorks, store.workList.works);\r\n                });\r\n            },\r\n\r\n            delete: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                store.workList.works.splice(store.workList.works.indexOf(work), 1);\r\n                return store.api.delete({ id: work.id },\r\n                    function () {\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    });\r\n            },\r\n\r\n            get: function (id) {\r\n\r\n                return store.listApi.get({ id: id },\r\n                    \r\n                    function (resp) {\r\n                        angular.copy(resp, store.workList);\r\n                    },\r\n\r\n                    function (error) {\r\n                        var x;\r\n                    })\r\n\r\n                    .$promise;\r\n            },\r\n\r\n            insert: function (work) {\r\n                var originalWorks = store.workList.works.slice(0);\r\n\r\n                var temp =  store.api.save(work,\r\n                    function success(resp) {\r\n                        work.id = resp.id;\r\n                        store.workList.works.push(work);\r\n                    }, function error() {\r\n                        angular.copy(originalWorks, store.workList.works);\r\n                    })\r\n                    .$promise;\r\n\r\n                \r\n                return temp;\r\n            },\r\n\r\n            put: function (work) {\r\n                return store.api.update({ id: work.id }, work)\r\n                    .$promise;\r\n            }\r\n        };\r\n\r\n        var promise = new Promise(function (resolve, reject) {\r\n            resolve(store);\r\n        })\r\n        return promise;\r\n    }])\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./services/workStorage.js\n// module id = 9\n// module chunks = 0","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../Content/css/index.css\n// module id = 13\n// module chunks = 0","module.exports = \"\\r\\n<ol>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/todo-lists\\\">Todo Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"todoLists\\\">Todo Lists</a></p>\\r\\n        \\r\\n    </li>\\r\\n    <li>\\r\\n        <!--<p><a href=\\\"#!/work-lists\\\">Work Lists</a></p>-->\\r\\n        <p><a ui-sref=\\\"workLists\\\">Work Lists</a></p>\\r\\n    </li>\\r\\n</ol>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/options.html\n// module id = 14\n// module chunks = 0","module.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>todo lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addTodoList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How todo list should be named?\\\" ng-model=\\\"newTodoList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"todoLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"todoList in todoLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: todoList == editedTodoList}\\\">\\r\\n                <!--<a ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                </a>-->\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"todoLists.todos({id:todoList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editTodoList(todoList)\\\">{{todoList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeTodoList(todoList)\\\"></button>\\r\\n                </div>\\r\\n                <form ng-submit=\\\"saveEdits(todoList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todoList.title\\\" todo-escape=\\\"revertEdits(todoList)\\\" ng-blur=\\\"saveEdits(todoList, 'blur')\\\"\\r\\n                           todo-focus=\\\"todoList == editedTodoList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/todo-lists.html\n// module id = 15\n// module chunks = 0","module.exports = \"\\r\\n    <section class=\\\"todoapp\\\">\\r\\n        <header class=\\\"header\\\">\\r\\n            <h1>todos</h1>\\r\\n            <form class=\\\"todo-form\\\" ng-submit=\\\"addTodo()\\\">\\r\\n                <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newTodo\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n            </form>\\r\\n        </header>\\r\\n        <section class=\\\"main\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n            <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n            <ul class=\\\"todo-list\\\">\\r\\n                <li ng-repeat=\\\"todo in todoList.todos | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: todo.completed, editing: todo == editedTodo}\\\">\\r\\n                    <div class=\\\"view\\\">\\r\\n                        <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"todo.completed\\\" ng-change=\\\"toggleCompleted(todo)\\\">\\r\\n                        <label ng-dblclick=\\\"editTodo(todo)\\\">{{todo.title}}</label>\\r\\n                        <button class=\\\"destroy\\\" ng-click=\\\"removeTodo(todo)\\\"></button>\\r\\n                    </div>\\r\\n                    <form ng-submit=\\\"saveEdits(todo, 'submit')\\\">\\r\\n                        <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"todo.title\\\" todo-escape=\\\"revertEdits(todo)\\\" ng-blur=\\\"saveEdits(todo, 'blur')\\\"\\r\\n                               todo-focus=\\\"todo == editedTodo\\\">\\r\\n                    </form>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </section>\\r\\n        <footer class=\\\"footer\\\" ng-show=\\\"todoList.todos.length\\\" ng-cloak>\\r\\n            <span class=\\\"todo-count\\\">\\r\\n                <strong>{{remainingCount}}</strong>\\r\\n                <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n            </span>\\r\\n            <ul class=\\\"filters\\\">\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: null})\\\" >All</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'active'})\\\" >Active</a>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"todoLists.todos({id:todoList.id, status: 'completed'})\\\">Completed</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedTodos()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n        </footer>\\r\\n    </section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/todos.html\n// module id = 16\n// module chunks = 0","module.exports = \"<section class=\\\"todoapp todo-lists\\\">\\r\\n\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>work lists</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWorkList()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"How work list should be named?\\\" ng-model=\\\"newWorkList\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workLists.length\\\" ng-cloak>\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n            <li ui-sref-active=\\\"active\\\" ng-repeat=\\\"workList in workLists | filter:statusFilter track by $index\\\" ng-class=\\\"{ editing: workList == editedWorkList}\\\"> \\r\\n\\r\\n\\r\\n                <div class=\\\"view\\\" ui-sref=\\\"workLists.works({id:workList.id})\\\">\\r\\n                    <label ng-dblclick=\\\"editWorkList(workList)\\\">{{workList.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWorkList(workList)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(workList, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"workList.title\\\" work-escape=\\\"revertEdits(workList)\\\" ng-blur=\\\"saveEdits(workList, 'blur')\\\"\\r\\n                           work-focus=\\\"workList == editedWorkList\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n\\r\\n</section>\\r\\n\\r\\n<div ui-view=\\\"\\\" class=\\\"todos\\\"></div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/work-lists.html\n// module id = 17\n// module chunks = 0","module.exports = \"\\r\\n<section class=\\\"todoapp\\\">\\r\\n    <header class=\\\"header\\\">\\r\\n        <h1>works</h1>\\r\\n        <form class=\\\"todo-form\\\" ng-submit=\\\"addWork()\\\">\\r\\n            <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" ng-model=\\\"newWork\\\" ng-disabled=\\\"saving\\\" autofocus>\\r\\n        </form>\\r\\n    </header>\\r\\n    <section class=\\\"main\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n\\r\\n        <input class=\\\"toggle-all\\\" type=\\\"checkbox\\\" ng-model=\\\"allChecked\\\" ng-click=\\\"markAll(allChecked)\\\">\\r\\n\\r\\n        <label for=\\\"toggle-all\\\">Mark all as complete</label>\\r\\n\\r\\n        <ul class=\\\"todo-list\\\">\\r\\n\\r\\n            <li ng-repeat=\\\"work in workList.works | filter:statusFilter track by $index\\\" ng-class=\\\"{completed: work.completed, editing: work == editedWork}\\\">\\r\\n\\r\\n                <div class=\\\"view\\\">\\r\\n                    <input class=\\\"toggle\\\" type=\\\"checkbox\\\" ng-model=\\\"work.completed\\\" ng-change=\\\"toggleCompleted(work)\\\">\\r\\n                    <label ng-dblclick=\\\"editWork(work)\\\">{{work.title}}</label>\\r\\n                    <button class=\\\"destroy\\\" ng-click=\\\"removeWork(work)\\\"></button>\\r\\n                </div>\\r\\n\\r\\n                <form ng-submit=\\\"saveEdits(work, 'submit')\\\">\\r\\n                    <input class=\\\"edit\\\" ng-trim=\\\"false\\\" ng-model=\\\"work.title\\\" work-escape=\\\"revertEdits(work)\\\" ng-blur=\\\"saveEdits(work, 'blur')\\\"\\r\\n                           work-focus=\\\"work == editedWork\\\">\\r\\n                </form>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </section>\\r\\n    <footer class=\\\"footer\\\" ng-show=\\\"workList.works.length\\\" ng-cloak>\\r\\n        <span class=\\\"todo-count\\\">\\r\\n            <strong>{{remainingCount}}</strong>\\r\\n            <ng-pluralize count=\\\"remainingCount\\\" when=\\\"{ one: 'item left', other: 'items left' }\\\"></ng-pluralize>\\r\\n        </span>\\r\\n        <ul class=\\\"filters\\\">\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == ''} \\\" ui-sref=\\\"workLists.works({id:workList.id, status: null})\\\">All</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'active'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'active'})\\\">Active</a>\\r\\n            </li>\\r\\n            <li>\\r\\n                <a ng-class=\\\"{selected: status == 'completed'}\\\" ui-sref=\\\"workLists.works({id:workList.id, status: 'completed'})\\\">Completed</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n        <button class=\\\"clear-completed\\\" ng-click=\\\"clearCompletedWorks()\\\" ng-show=\\\"completedCount\\\">Clear completed</button>\\r\\n    </footer>\\r\\n</section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./templates/works.html\n// module id = 18\n// module chunks = 0","ï»¿/*global angular */\r\n\r\n/**\r\n * The main TodoMVC app module\r\n *\r\n * @type {angular.Module}\r\n */\r\n\r\nimport '../Content/css/index.css';\r\n\r\nangular.module('todomvc', ['ui.router', 'ngResource'])\r\n    .config(['$stateProvider','$urlRouterProvider',function ($stateProvider, $urlRouterProvider) {\r\n        'use strict';\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('options', {\r\n                url: '/',\r\n                template: require('./templates/options.html')  \r\n            })\r\n            .state('workLists', {\r\n                url: '/work-lists',\r\n                template: require('./templates/work-lists.html'),\r\n                controller: 'WorkListsCtrl',\r\n                resolve: {\r\n                    store: ['workListsStorage', function (workListsStorage) {\r\n                        workListsStorage.get();\r\n                        return workListsStorage;\r\n                    }]\r\n                }\r\n            })\r\n\r\n\r\n            .state('todoLists', {\r\n                url: '/todo-lists',\r\n                template: require('./templates/todo-lists.html'),\r\n                controller: 'TodoListsCtrl',\r\n                resolve: {\r\n                    store: ['todoListsStorage', function (todoListsStorage) {\r\n                        todoListsStorage.get();\r\n                        return todoListsStorage;\r\n                    }]\r\n                }\r\n            })     \r\n            .state('todoLists.todos', {\r\n                url: 'todo-lists/:id/:status',\r\n                template: require('./templates/todos.html'), \r\n                controller: 'TodoCtrl',\r\n                resolve: {\r\n                    store: ['todoStorage','$stateParams', function (todoStorage, $stateParams) {\r\n                        return todoStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (todoModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n\r\n            .state('workLists.works', {\r\n                url: 'work-lists/:id/:status',\r\n                template: require('./templates/works.html'),\r\n                controller: 'WorkCtrl',\r\n                resolve: {\r\n                    store: ['workStorage', '$stateParams', function (workStorage, $stateParams) {\r\n                        return workStorage.then(function (module) {\r\n                            return module.get($stateParams.id).then(function (workModule) {\r\n                                return module;\r\n                            });\r\n                        });\r\n                    }]\r\n                }\r\n            })\r\n    }]    ); \r\n\r\nrequire('./directives/todoEscape');\r\nrequire('./directives/todoFocus');\r\n\r\nrequire('./services/todoListsStorage');\r\nrequire('./services/todoStorage');\r\n\r\nrequire('./services/workListsStorage');\r\nrequire('./services/workStorage');\r\n\r\nrequire('./controllers/todoListsCtrl');\r\nrequire('./controllers/todoCtrl');\r\n\r\nrequire('./controllers/workListsCtrl');\r\nrequire('./controllers/workCtrl');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.js\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}